@page "/obraitemetapapadrao/novo"
@page "/obraitemetapapadrao/editar/{Id:long}"

@using ByTescaro.ConstrutorApp.Application.DTOs
@using ByTescaro.ConstrutorApp.UI.Services
@using Microsoft.AspNetCore.Authorization
@inject ObraItemEtapaPadraoApiService ObraItemEtapaPadraoApiService
@inject ObraEtapaPadraoApiService ObraEtapaPadraoApiService
@inject NavigationManager Navigation
@inject NotificationService NotificationService
@attribute [Authorize]

<PageTitle>Item da Etapa</PageTitle>

<RadzenCard Class="rz-mt-5 rz-p-4 rz-shadow-md rz-rounded-md rz-mx-auto" Style="max-width: 1300px; width: 100%;">
    <RadzenTemplateForm TItem="ObraItemEtapaPadraoDto" Data="@model" Submit="Salvar" InvalidSubmit="ExibirErros">
        <RadzenHeading Size="H4" Text="@(Id == 0 ? "Novo Item da Etapa" : "Editar Item da Etapa")" Class="rz-mb-3" />

        <RadzenFieldset Text="Dados do Item" Style="margin-bottom: 1.5rem;">
            <RadzenRow>
                <RadzenColumn Size="12" SizeMD="8">
                    <RadzenLabel Text="Nome" />
                    <RadzenTextBox @bind-Value="model.Nome" Name="Nome" Style="width: 100%;" />
                    <RadzenRequiredValidator Component="Nome" Text="O nome é obrigatório" />
                </RadzenColumn>

                <RadzenColumn Size="12" SizeMD="2">
                    <RadzenLabel Text="Ordem" />
                    <RadzenNumeric @bind-Value="model.Ordem" Name="Ordem" Style="width: 100%;" />
                    <RadzenRequiredValidator Component="Ordem" Text="A ordem é obrigatória" />
                </RadzenColumn>

                <RadzenColumn Size="12" SizeMD="2" Class="rz-align-items-end rz-display-flex">
                    <RadzenCheckBox @bind-Value="model.IsDataPrazo" Name="IsDataPrazo" />
                    <RadzenLabel Text="Controle de Prazo?" Style="margin-left: 0.5rem;" />
                </RadzenColumn>

                <RadzenColumn Size="12">
                    <RadzenLabel Text="Etapa da Obra" />
                    <RadzenDropDown @bind-Value="model.ObraEtapaId"
                                    Name="ObraEtapaId"
                                    Data="@etapas"
                                    TextProperty="Nome"
                                    ValueProperty="Id"
                                    Placeholder="-- Selecione uma Etapa --"
                                    Style="width: 100%;" />
                    <RadzenRequiredValidator Component="ObraEtapaId" Text="A etapa da obra é obrigatória" />
                </RadzenColumn>

                @if (model.IsDataPrazo)
                {
                    <RadzenColumn Size="12" SizeMD="6">
                        <RadzenLabel Text="Dias de Prazo" />
                        <RadzenNumeric @bind-Value="model.DiasPrazo" Name="DiasPrazo" Style="width: 100%;" />
                    </RadzenColumn>
                }
            </RadzenRow>
        </RadzenFieldset>

        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="1rem" Class="rz-mt-3">
            <RadzenButton Text="Cancelar" ButtonStyle="ButtonStyle.Light" Click="@Cancelar" />
            <RadzenButton Text="Salvar" ButtonType="ButtonType.Submit" Icon="save" Style="min-width: 120px;" />
        </RadzenStack>
    </RadzenTemplateForm>
</RadzenCard>

@code {
    [Parameter] public long Id { get; set; }

    private ObraItemEtapaPadraoDto model = new();
    private List<ObraEtapaPadraoDto> etapas = new();

    protected override async Task OnInitializedAsync()
    {
        etapas = (await ObraEtapaPadraoApiService.GetAllAsync()).ToList();

        if (Id != 0)
        {
            var existente = await ObraItemEtapaPadraoApiService.GetByIdAsync(Id);
            if (existente is not null)
                model = existente;
        }
        else
        {
            model.Ordem = 1;
            model.ObraEtapaId = 0L;
        }
    }

    private async Task Salvar(ObraItemEtapaPadraoDto model)
    {
        try
        {
            if (model.Id == 0)
            {
                await ObraItemEtapaPadraoApiService.CreateAsync(model);
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Sucesso", Detail = "Item cadastrado com sucesso!", Duration = 4000 });
            }
            else
            {
                await ObraItemEtapaPadraoApiService.UpdateAsync(model);
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Sucesso", Detail = "Item atualizado com sucesso!", Duration = 4000 });
            }

            Navigation.NavigateTo("/obraitensetapapadrao");
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Erro", Detail = $"Erro ao salvar item: {ex.Message}", Duration = 5000 });
        }
    }

    private void ExibirErros()
    {
        NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Warning,
                Summary = "Atenção",
                Detail = "Existem erros de validação no formulário.",
                Duration = 4000
            });
    }

    private void Cancelar() => Navigation.NavigateTo("/obraitensetapapadrao");
}
