@using ByTescaro.ConstrutorApp.Application.DTOs
@using ByTescaro.ConstrutorApp.UI.Services
@inject NotificationService NotificationService

<RadzenMediaQuery Query="(max-width: 768px)" Change="OnMediaChanged" />

<RadzenCard Class="rz-p-4">
    <RadzenHeading Size="H6" Text="Listas de Serviços da Obra" />

    <RadzenRow Class="rz-mb-2 rz-align-items-end" Style="gap: 0.5rem;">
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenDropDown Data="@ResponsaveisDisponiveis"
                            TextProperty="FornecedorNome"
                            ValueProperty="FornecedorId"
                            @bind-Value="ResponsavelSelecionadoId"
                            Placeholder="Selecionar Fornecedor"
                            Style="width: 100%;" />
        </RadzenColumn>

        <RadzenColumn Size="12" SizeMD="3">
            <RadzenButton Icon="add_circle_outline"
                          Text="Nova Lista"
                          Click="@NovaLista"
                          Style="width: 100%;" />
        </RadzenColumn>
    </RadzenRow>

    <RadzenAccordion>
        <Items>
            @if (Obra.ListasServico?.Any() == true)
            {
                foreach (var lista in Obra.ListasServico)
                {
                    <RadzenAccordionItem Text="@($"{lista.NomeResponsavel} - Id: {lista.Id}")" Icon="list_alt">
                        <ObraServicoListaEditor Lista="lista"
                                               Obra="Obra"
                                               OnChanged="StateHasChanged" />
                    </RadzenAccordionItem>
                }
            }
            else
            {
                <RadzenAccordionItem Text="Nenhuma lista cadastrada" Icon="info" Disabled="true">
                    <p style="padding: 1rem;">Nenhuma lista de serviços foi adicionada a esta obra.</p>
                </RadzenAccordionItem>
            }
        </Items>
    </RadzenAccordion>
</RadzenCard>

@code {
    private bool isMobile;
    private void OnMediaChanged(bool matches) => isMobile = matches;

    [Parameter] public ObraDto Obra { get; set; } = new();
    private List<ObraFornecedorDto> ResponsaveisDisponiveis = new();
    private long? ResponsavelSelecionadoId;

    protected override Task OnInitializedAsync()
    {
        ResponsaveisDisponiveis = Obra.Fornecedores ?? new();
        return Task.CompletedTask;
    }

    private Task NovaLista()
    {
        if (ResponsavelSelecionadoId is null || ResponsavelSelecionadoId == 0)
        {
            NotificationService.Notify(NotificationSeverity.Warning, "Responsável não selecionado", "Selecione um responsável para a nova lista.");
            return Task.CompletedTask;
        }

        var fornecedor = Obra.Fornecedores.FirstOrDefault(f => f.FornecedorId == ResponsavelSelecionadoId);
        if (fornecedor == null)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Erro", "Funcionário não encontrado.");
            return Task.CompletedTask;
        }

        var nova = new ObraServicoListaDto
            {
                ObraId = Obra.Id,
                ResponsavelId = fornecedor.FornecedorId,
                NomeResponsavel = fornecedor.FornecedorNome,
                Data = DateOnly.FromDateTime(DateTime.Today),
                Itens = new()
            };

        Obra.ListasServico ??= new();
        Obra.ListasServico.Add(nova);
        ResponsavelSelecionadoId = null;
        StateHasChanged();
        return Task.CompletedTask;
    }
}
