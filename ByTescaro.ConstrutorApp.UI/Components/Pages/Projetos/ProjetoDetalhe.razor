@page "/projetos/detalhes/{Id:long}"

@using ByTescaro.ConstrutorApp.Application.DTOs
@using ByTescaro.ConstrutorApp.Domain.Enums
@using ByTescaro.ConstrutorApp.Application.Utils
@using ByTescaro.ConstrutorApp.UI.Components.Pages.Projetos.Obra
@using ByTescaro.ConstrutorApp.UI.Services
@using Microsoft.AspNetCore.Authorization
@inject ProjetoApiService ProjetoApiService
@inject ObraApiService ObraApiService
@inject NavigationManager Navigation
@attribute [Authorize]

<style>
        ul[role="tablist"] {
                display: flex !important;
                flex-wrap: wrap;
                justify-content: center;
                padding: 0;
                margin: 0;
                gap: 0.5rem;

    }

            ul[role="tablist"] li {
                    flex: 1 1 auto;
                    text-align: center;
                    min-width: 120px;

    }

                ul[role="tablist"] li a {
                        display: block;
                        padding: 0.75rem 1rem;
                        font-weight: 500;
                        border-radius: 8px;
                        transition: background-color 0.2s;

    }

                    ul[role="tablist"] li a:hover {
                            background-color: #f0f0f0;

    }


</style>

<PageTitle>Detalhes do Projeto</PageTitle>

<RadzenCard Class="rz-mt-4 rz-p-4 rz-shadow-md rz-rounded-md rz-mx-auto" Style="max-width: 1500px; width: 100%;">
    <RadzenHeading Size="H4" Text="Detalhes do Projeto" Class="rz-mb-3" />

    @if (projeto is null)
    {
        <RadzenText Text="Carregando detalhes do projeto..." Style="color: gray; padding: 1rem;" />
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-top: 10px;" />
    }
    else
    {
        <!-- Resumo rápido do Projeto -->
        <RadzenRow Class="rz-mb-3">
            <RadzenColumn Size="12" SizeMD="3">
                <RadzenCard Class="rz-p-3 rz-shadow-xs">
                    <div class="rz-text-caption">Status</div>
                    <div class="rz-text-subtitle-1"><b>@EnumHelper.ObterDescricaoEnum(projeto.Status)</b></div>
                </RadzenCard>
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="3">
                <RadzenCard Class="rz-p-3 rz-shadow-xs">
                    <div class="rz-text-caption">Início</div>
                    <div class="rz-text-subtitle-1"><b>@projeto.DataInicio?.ToString("dd/MM/yyyy")</b></div>
                </RadzenCard>
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="3">
                <RadzenCard Class="rz-p-3 rz-shadow-xs">
                    <div class="rz-text-caption">Fim Previsto</div>
                    <div class="rz-text-subtitle-1"><b>@(projeto.DataFim == null ? "Sem Previsão" : projeto.DataFim.Value.ToString("dd/MM/yyyy"))</b></div>
                </RadzenCard>
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="3">
                <RadzenCard Class="rz-p-3 rz-shadow-xs">
                    <div class="rz-text-caption">Progresso Médio</div>
                    <RadzenProgressBar Value="@progressoProjeto" ShowValue="true" />
                </RadzenCard>
            </RadzenColumn>
        </RadzenRow>

        <RadzenTabs>
            <Tabs>
                <!-- INFORMAÇÕES GERAIS -->
                <RadzenTabsItem Text="Informações Gerais">
                    <!-- (reaproveitei seu bloco original, só compactei) -->
                    <RadzenFieldset Text="Dados Principais do Projeto" Style="margin-bottom: 1.5rem;">
                        <RadzenRow>
                            <RadzenColumn Size="12" SizeMD="6">
                                <b>Nome:</b> @projeto.Nome
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="6">
                                <b>Status:</b> @EnumHelper.ObterDescricaoEnum(projeto.Status)
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="6">
                                <b>Data Início:</b> @projeto.DataInicio?.ToString("dd/MM/yyyy")
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="6">
                                <b>Data Fim Prevista:</b> @projeto.DataFim?.ToString("dd/MM/yyyy")
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="6">
                                <b>Usuário Cadastro:</b> @projeto.UsuarioCadastroNome
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="6">
                                <b>Data/Hora Cadastro:</b> @projeto.DataHoraCadastro.ToString("dd/MM/yyyy HH:mm:ss")
                            </RadzenColumn>
                        </RadzenRow>
                    </RadzenFieldset>

                    @if (!string.IsNullOrWhiteSpace(projeto.CEP))
                    {
                        <RadzenFieldset Text="Endereço" Style="margin-bottom: 1.5rem;">
                            <RadzenRow>
                                <RadzenColumn Size="12" SizeMD="3"><b>CEP:</b> @projeto.CEP</RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="6"><b>Logradouro:</b> @projeto.Logradouro</RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="3"><b>Número:</b> @projeto.Numero</RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="4"><b>Complemento:</b> @projeto.Complemento</RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="4"><b>Bairro:</b> @projeto.Bairro</RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="4"><b>Cidade:</b> @projeto.Cidade</RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="6"><b>Estado:</b> @projeto.Estado</RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="2"><b>UF:</b> @projeto.UF</RadzenColumn>
                            </RadzenRow>
                        </RadzenFieldset>
                    }

                    <RadzenFieldset Text="Observações">
                        <div style="white-space: pre-wrap">
                            <b>Observação Geral:</b><br />
                            @projeto.Observacao
                        </div>

                        @if (projeto.Status == StatusProjeto.Concluido)
                        {
                            <div class="rz-mt-3" style="white-space: pre-wrap">
                                <b>Descrição da Conclusão:</b><br />
                                @projeto.DescricaoConclusao
                            </div>
                        }
                        @if (projeto.Status == StatusProjeto.Cancelado)
                        {
                            <div class="rz-mt-3" style="white-space: pre-wrap">
                                <b>Descrição do Cancelamento:</b><br />
                                @projeto.DescricaoCancelamento
                            </div>
                        }
                    </RadzenFieldset>
                </RadzenTabsItem>

                <!-- OBRAS DO PROJETO -->
                <RadzenTabsItem Text="Obras do Projeto">
                    @if (projeto.Obras is null || !projeto.Obras.Any())
                    {
                        <RadzenAlert Severity="AlertSeverity.Info" Summary="Nenhuma obra vinculada ao projeto." />
                    }
                    else
                    {
                        <!-- Filtro simples por nome -->
                        <RadzenTextBox @bind-Value="filtroObra" Placeholder="Filtrar obra por nome..." Style="width: 320px" />
                        <br />
                        <br />
                        <RadzenAccordion ExpandMode="ExpandMode.Multiple">
                            <Items>
                                @foreach (var obra in projeto.Obras
                                                        .Where(o => string.IsNullOrWhiteSpace(filtroObra) || o.Nome.Contains(filtroObra, StringComparison.OrdinalIgnoreCase))
                                                        .OrderBy(o => o.Nome))
                                {
                                    var progresso = CalcularProgressoObra(obra);

                                    <RadzenAccordionItem Text="@obra.Nome">
                                            <div class="rz-d-flex rz-align-items-center rz-gap-2 rz-justify-content-between" style="width: 100%;">
                                                <div>
                                                    <b>@obra.Nome</b>
                                                    <div class="rz-text-caption">
                                                        <b>Status:</b> @obra.Status |
                                                        <b>Início:</b> @obra.DataInicioExecucao?.ToString("dd/MM/yyyy")
                                                    </div>
                                                </div>
                                                <div style="min-width:260px">
                                                    <RadzenProgressBar Value="@progresso" ShowValue="true" />
                                                </div>
                                            </div>

                                        <!-- Conteúdo da obra: seus componentes em tabs -->
                                        <RadzenTabs Class="rz-mt-4">
                                            <Tabs>
                                                <RadzenTabsItem Text="Checklist"><ChecklistObraDetalheTab Obra="obra" /></RadzenTabsItem>
                                                <RadzenTabsItem Text="Funcionários"><ObraFuncionariosDetalheTab Obra="obra" /></RadzenTabsItem>
                                                <RadzenTabsItem Text="Equipamentos"><ObraEquipamentosDetalheTab Obra="obra" /></RadzenTabsItem>
                                                <RadzenTabsItem Text="Insumos"><ObraInsumoListasDetalheTab Obra="obra" /></RadzenTabsItem>
                                                <RadzenTabsItem Text="Serviços"><ObraServicoListasDetalheTab Obra="obra" /></RadzenTabsItem>
                                                <RadzenTabsItem Text="Documentos"><ObraDocumentosDetalheTab Obra="obra" /></RadzenTabsItem>
                                                <RadzenTabsItem Text="Imagens"><ObraImagensDetalheTab Obra="obra" /></RadzenTabsItem>
                                                <RadzenTabsItem Text="Retrabalhos"><ObraRetrabalhosDetalheTab Obra="obra" /></RadzenTabsItem>
                                                <RadzenTabsItem Text="Pendências"><ObraPendenciasDetalheTab Obra="obra" /></RadzenTabsItem>

                                            </Tabs>
                                        </RadzenTabs>
                                    </RadzenAccordionItem>
                                }
                            </Items>
                        </RadzenAccordion>
                    }
                </RadzenTabsItem>
            </Tabs>
        </RadzenTabs>

        <div class="rz-mt-4 rz-d-flex rz-justify-content-end rz-gap-3">
            <RadzenButton Text="Voltar" Click="@(() => Navigation.NavigateTo("/projetos"))" ButtonStyle="ButtonStyle.Light" />
            <RadzenButton Text="Editar" Click="@(() => Navigation.NavigateTo($"/projetos/editar/{projeto.Id}"))" Icon="edit" ButtonStyle="ButtonStyle.Primary" />
        </div>
    }
</RadzenCard>

@code {
    [Parameter] public long Id { get; set; }
    private ProjetoDto? projeto;
    private int progressoProjeto;
    private string? filtroObra;

    protected override async Task OnInitializedAsync()
    {
        projeto = await ProjetoApiService.GetByIdAsync(Id);
        projeto.Obras = await ObraApiService.GetByProjetoIdAsync(Id);

        // Se vier com obras/etapas/itens, já calcula o progresso do projeto aqui.
        if (projeto?.Obras != null && projeto.Obras.Any())
        {
            progressoProjeto = CalcularProgressoProjeto(projeto.Obras);
        }
    }

    // ======= Cálculos de progresso =======

    // Ponderado por quantidade de itens (mais justo quando as etapas têm tamanhos diferentes)
    private int CalcularProgressoProjeto(IEnumerable<ObraDto> obras)
    {
        long totalItens = 0;
        long totalConcluidos = 0;

        foreach (var o in obras)
        {
            if (o.Etapas == null) continue;
            foreach (var e in o.Etapas)
            {
                var itens = e?.Itens ?? new();
                totalItens += itens.Count;
                totalConcluidos += itens.Count(i => i.Concluido);
            }
        }

        if (totalItens == 0) return 0;
        return (int)Math.Round(100.0 * totalConcluidos / totalItens);
    }

    private int CalcularProgressoObra(ObraDto obra)
    {
        if (obra?.Etapas == null || !obra.Etapas.Any()) return 0;

        long totalItens = 0;
        long conclu = 0;

        foreach (var e in obra.Etapas)
        {
            var itens = e?.Itens ?? new();
            totalItens += itens.Count;
            conclu += itens.Count(i => i.Concluido);
        }

        if (totalItens == 0) return 0;
        return (int)Math.Round(100.0 * conclu / totalItens);
    }
}
