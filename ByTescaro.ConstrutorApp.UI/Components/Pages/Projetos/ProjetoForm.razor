@page "/projetos/novo"
@page "/projetos/editar/{Id:long}"

@using ByTescaro.ConstrutorApp.Application.DTOs
@using ByTescaro.ConstrutorApp.Application.Utils
@using ByTescaro.ConstrutorApp.Domain.Enums
@using ByTescaro.ConstrutorApp.UI.Services
@using ByTescaro.ConstrutorApp.UI.Utils
@using System.ComponentModel.DataAnnotations
@using System.Reflection
@inject ProjetoApiService ProjetoApiService
@inject ClienteApiService ClienteApiService
@inject CepService CepService
@inject NavigationManager Navigation
@inject NotificationService NotificationService

@* 1. Adicionado um indicador de carregamento para melhor UX *@
@if (isLoading)
{
    <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px" />
    <p>Carregando dados do projeto...</p>
}
else
{
    <RadzenCard Class="rz-mx-auto rz-mt-4 rz-p-4" Style="max-width: 1300px">
        <RadzenTemplateForm TItem="ProjetoDto" Data="@projeto" Submit="SalvarProjeto">
            <RadzenHeading Size="H4" Text="@Titulo" Class="rz-mb-4" />

            <RadzenTabs RenderMode="TabRenderMode.Client">
                <Tabs>
                    <RadzenTabsItem Text="Informações do Projeto">
                        <RadzenFieldset Text="Dados do Projeto" Style="margin-bottom: 1.5rem;">
                            <RadzenRow>
                                <RadzenColumn Size="12" SizeMD="6">
                                    <RadzenLabel Text="Nome *" />
                                    <RadzenTextBox @bind-Value="projeto.Nome" Name="Nome" Style="width: 100%;" />
                                    <RadzenRequiredValidator Component="Nome" Text="Campo obrigatório" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="6">
                                    <RadzenLabel Text="Cliente *" />
                                    <RadzenDropDown @bind-Value="projeto.ClienteId" Name="ClienteId"
                                    AllowClear="true"
                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    FilterOperator="StringFilterOperator.Contains"
                                    AllowFiltering="true"
                                    Data="@clientes" TextProperty="Nome" ValueProperty="Id"
                                    Placeholder="-- Selecione um cliente --" Style="width: 100%;" />
                                    <RadzenRequiredValidator Component="ClienteId" Text="Campo obrigatório" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="6">
                                    <RadzenLabel Text="Status *" />
                                    <RadzenDropDown @bind-Value="projeto.Status" Name="Status"
                                    Data="@statusOptions" TextProperty="Label" ValueProperty="Value"
                                    Placeholder="-- Selecione --" Style="width: 100%;" />
                                    <RadzenRequiredValidator Component="Status" Text="Campo obrigatório" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="3">
                                    <RadzenLabel Text="Data de Início" />
                                    <RadzenDatePicker @bind-Value="projeto.DataInicio" Name="DataInicio" Style="width: 100%;" DateFormat="dd/MM/yyyy" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="3">
                                    <RadzenLabel Text="Data de Término" />
                                    <RadzenDatePicker @bind-Value="projeto.DataFim" Name="DataFim" Style="width: 100%;" DateFormat="dd/MM/yyyy" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="6">
                                    <RadzenLabel Text="Telefone Principal" />
                                    <RadzenMask @bind-Value="projeto.TelefonePrincipal"
                                    Mask="(**) *****-****" Name="TelefonePrincipal" Style="width: 100%;" />
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenFieldset>

                        <RadzenFieldset Text="Endereço">
                            <RadzenRow>
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="CEP *" />
                                    <RadzenMask @bind-Value="projeto.CEP"
                                    Mask="*****-***"
                                    CharacterPattern="[0-9]"
                                    Placeholder="00000-000"
                                    Name="CEP"
                                    Change="@(async (string _) => await PreencherEndereco())"
                                    Style="width: 100%;" />
                                    <RadzenRequiredValidator Component="CEP" Text="Campo obrigatório" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenLabel Text="Logradouro" />
                                    <RadzenTextBox @bind-Value="projeto.Logradouro" ReadOnly="!string.IsNullOrEmpty(projeto.Bairro)" Style="width: 100%;" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Número" />
                                    <RadzenTextBox @bind-Value="projeto.Numero" Style="width: 100%;" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Bairro" />
                                    <RadzenTextBox @bind-Value="projeto.Bairro" ReadOnly="!string.IsNullOrEmpty(projeto.Bairro)" Style="width: 100%;" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Cidade" />
                                    <RadzenTextBox @bind-Value="projeto.Cidade" ReadOnly Style="width: 100%;" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Estado" />
                                    <RadzenTextBox @bind-Value="projeto.Estado" ReadOnly Style="width: 100%;" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="2">
                                    <RadzenLabel Text="UF" />
                                    <RadzenTextBox @bind-Value="projeto.UF" ReadOnly Style="width: 100%;" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="6">
                                    <RadzenLabel Text="Complemento" />
                                    <RadzenTextBox @bind-Value="projeto.Complemento" Style="width: 100%;" />
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenFieldset>

                        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="1rem" Class="rz-mt-4">
                            <RadzenButton Text="Cancelar" ButtonStyle="ButtonStyle.Light" Click="Cancelar" IsBusy="@isLoading" />
                            <RadzenButton Text="Salvar" ButtonType="ButtonType.Submit" Icon="save" IsBusy="@isLoading" />
                        </RadzenStack>

                    </RadzenTabsItem>

                    @* A aba de Obras só aparece no modo de edição *@
                    @if (projeto.Id > 0)
                    {
                        <RadzenTabsItem Text="Obras do Projeto">

                            @* Aqui você pode renderizar a lista de obras *@
                            <p>Aba de Obras - @projeto.Obras.Count obra(s) encontrada(s).</p>
                            @* Incluir o seu ObraAccordionItem aqui dentro de um loop *@
                            <RadzenAccordion>
                                <Items>
                                    @for (int i = 0; i < projeto.Obras.Count; i++)
                                    {
                                        <ObraAccordionItem Obra="@projeto.Obras[i]"
                                        TituloObra="@(!string.IsNullOrWhiteSpace(projeto.Obras[i].Nome) ? projeto.Obras[i].Nome : $"Obra #{i + 1}")"
                                        ResponsavelOptions="@responsavelMaterialEnumOptions"
                                        StatusOptions="@statusObraOptions"
                                        OnRemover="RemoverObra" />
                                    }
                                </Items>

                            </RadzenAccordion>

                            <RadzenButton Text="Adicionar Nova Obra"
                            Icon="add_circle_outline"
                            Style="margin-top: 1rem;"
                            Click="AdicionarNovaObra" />
                        </RadzenTabsItem>
                    }
                </Tabs>
            </RadzenTabs>
        </RadzenTemplateForm>
    </RadzenCard>
}


@code {
    [Parameter] public long Id { get; set; }

    // Estado do Componente
    private ProjetoDto projeto = new();
    private List<ClienteDto> clientes = new();
    private bool isLoading = true;

    // Opções de Dropdown (carregadas uma vez)
    private readonly List<EnumOption<StatusProjeto>> statusOptions = EnumHelper.ListarOpcoes<StatusProjeto>();
    private readonly List<object> responsavelMaterialEnumOptions = EnumHelper.ListarOpcoes<ResponsavelMaterialEnum>().Cast<object>().ToList();
    private readonly List<object> statusObraOptions = EnumHelper.ListarOpcoes<StatusObra>().Cast<object>().ToList();

    private string Titulo => Id == 0 ? "Novo Projeto" : "Editar Projeto";

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;

        // Inicia o carregamento dos clientes em paralelo para otimizar o tempo
        var clientesTask = ClienteApiService.GetAllAsync();

        if (Id != 0) // Modo de Edição
        {
            // 2. Faz uma ÚNICA chamada otimizada que busca o projeto e toda a sua árvore de dados
            projeto = await ProjetoApiService.GetByIdAsync(Id);

            if (projeto == null)
            {
                NotificationService.Notify(NotificationSeverity.Error, "Não Encontrado", "O projeto solicitado não existe.");
                Navigation.NavigateTo("/projetos");
                return;
            }
        }
        else // Modo de Criação
        {
            // Apenas inicializa um novo DTO
            projeto = new ProjetoDto();
            AdicionarNovaObra(); // Garante que todo novo projeto já comece com uma obra principal
        }

        // Aguarda a conclusão da busca de clientes
        clientes = await clientesTask;

        // Finaliza o carregamento e permite a renderização do formulário
        isLoading = false;
    }

    void AdicionarNovaObra()
    {
        // Se for a primeira obra, nomeia como "Obra Principal". Senão, numera as novas.
        string nomeObra = !projeto.Obras.Any() ? "Obra Principal" : $"Nova Obra {projeto.Obras.Count + 1}";
        long projetoId = projeto.Id;

        projeto.Obras.Add(new ObraDto { Nome = nomeObra, Status = StatusObra.NaoIniciada, ProjetoId = projetoId });
        StateHasChanged(); // Garante que a UI seja atualizada para mostrar o novo item do Accordion
    }

    void RemoverObra(ObraDto obra)
    {
        if (projeto.Obras.Contains(obra))
        {
            projeto.Obras.Remove(obra);
            StateHasChanged();
        }
    }

    async Task PreencherEndereco()
    {
        await EnderecoAutoPreenchimentoHelper.PreencherEnderecoAsync(
            projeto.CEP, CepService, NotificationService,
            logradouro => projeto.Logradouro = logradouro,
            bairro => projeto.Bairro = bairro,
            cidade => projeto.Cidade = cidade,
            estado => projeto.Estado = estado,
            uf => projeto.UF = uf
        );
    }

    async Task SalvarProjeto(ProjetoDto model)
    {
        isLoading = true; // Desabilita os botões durante o salvamento

        try
        {
            if (model.Id == 0) // Criação
            {
                var resultado = await ProjetoApiService.CreateAsync(model);
                if (resultado?.Id > 0)
                {
                    NotificationService.Notify(NotificationSeverity.Success, "Sucesso", "Projeto criado com sucesso!");
                    // Navega para a página de edição para continuar o trabalho, forçando o recarregamento completo.
                    Navigation.NavigateTo($"/projetos/editar/{resultado.Id}", forceLoad: true);
                }
            }
            else // Atualização
            {
                await ProjetoApiService.UpdateAsync(model);
                NotificationService.Notify(NotificationSeverity.Success, "Sucesso", "Projeto salvo com sucesso!");
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Erro", $"Falha ao salvar o projeto: {ex.Message}");
        }
        finally
        {
            isLoading = false; // Reabilita os botões
            StateHasChanged();
        }
    }

    void Cancelar() => Navigation.NavigateTo("/projetos");
}