@using ByTescaro.ConstrutorApp.Application.DTOs
@using ByTescaro.ConstrutorApp.Application.Interfaces
@using ByTescaro.ConstrutorApp.Domain.Enums
@using ByTescaro.ConstrutorApp.UI.Services
@using Radzen
@using Radzen.Blazor
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using ByTescaro.ConstrutorApp.Application.Utils

@inject IAgendaService AgendaService
@inject UsuarioApiService UsuarioApiService
@inject IUsuarioLogadoService UsuarioLogadoService
@inject DialogService DialogService
@inject NotificationService NotificationService

<RadzenStack Orientation="Orientation.Vertical" Gap="1rem" Style="padding: 1rem;">
    <RadzenText Text="Detalhes / Editar Evento" TextStyle="TextStyle.H5" />

    @* Exibir o nome do criador do evento no topo *@
    @if (eventoSelecionado != null)
    {
        <RadzenText Text="@($"Criado por: {eventoSelecionado.NomeCriador ?? "Desconhecido"}")" TextStyle="TextStyle.Caption" Class="rz-mb-3" />
    }

    @if (editContext != null && eventoRequest != null)
    {
        <EditForm EditContext="@editContext" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <RadzenFieldset Text="Detalhes do Evento">
                <RadzenStack Orientation="Orientation.Vertical" Gap="0.5rem">
                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenLabel Text="Título:" Component="Titulo" />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="8">
                            <RadzenTextBox @bind-Value="eventoRequest.Titulo" Style="width:100%;" Name="Titulo" Disabled="!isCreator" />
                        </RadzenColumn>
                    </RadzenRow>
                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenLabel Text="Descrição:" Component="Descricao" />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="8">
                            <RadzenTextArea @bind-Value="eventoRequest.Descricao" Style="width:100%;" Name="Descricao" Disabled="!isCreator" />
                        </RadzenColumn>
                    </RadzenRow>
                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenLabel Text="Início:" Component="DataHoraInicio" />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="8">
                            <RadzenDatePicker @bind-Value="eventoRequest.DataHoraInicio" ShowTime="true" DateFormat="dd/MM/yyyy HH:mm"
                                              Style="width:100%;" Name="DataHoraInicio" Disabled="!isCreator" />
                            @* REMOVIDO: RadzenRequiredValidator Component="DataHoraInicio" *@
                        </RadzenColumn>
                    </RadzenRow>
                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenLabel Text="Término:" Component="DataHoraTermino" />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="8">
                            <RadzenDatePicker @bind-Value="eventoRequest.DataHoraFim" ShowTime="true" DateFormat="dd/MM/yyyy HH:mm"
                                              Style="width:100%;" Name="DataHoraFim" Disabled="!isCreator" />
                            @* REMOVIDO: RadzenRequiredValidator Component="DataHoraTermino" *@
                            @* REMOVIDO: RadzenCompareValidator Component="DataHoraTermino" *@
                        </RadzenColumn>
                    </RadzenRow>
                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenLabel Text="Visibilidade:" Component="Visibilidade" />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="8">
                            <RadzenDropDown @bind-Value="eventoRequest.Visibilidade" Data="@VisibilidadeList"
                                            TextProperty="Label" ValueProperty="Value"
                                            Style="width:100%;" Name="Visibilidade" Disabled="!isCreator" />
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenStack>
            </RadzenFieldset>

            <RadzenFieldset Text="Participantes (Convidados)" Class="rz-mt-3">
                <RadzenStack Orientation="Orientation.Vertical" Gap="0.5rem">
                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenLabel Text="Selecionar Usuários:" Component="Participantes" />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="8">
                            <RadzenDropDown @bind-Value="eventoRequest.IdsParticipantesConvidados" Data="@usuariosDisponiveis"
                                            TextProperty="Nome" ValueProperty="Id" Multiple="true"
                                            AllowClear="true" Style="width:100%;" Name="Participantes" Disabled="!isCreator">
                                <Template Context="userContext">
                                    <div>
                                        <strong>@((string)userContext.Nome)</strong> - @((string)userContext.TelefoneWhatsApp)
                                    </div>
                                </Template>
                            </RadzenDropDown>

                            @if (usuariosDisponiveis != null && !usuariosDisponiveis.Any())
                            {
                                <RadzenText Text="Nenhum usuário disponível para convite (após filtro)." TextStyle="TextStyle.Caption" Class="rz-color-info rz-mt-2" />
                            }
                           
                        </RadzenColumn>
                    </RadzenRow>
                    <RadzenRow>
                        <RadzenColumn Size="12">
                            <RadzenDataGrid Data="@eventoSelecionado?.Participantes" AllowPaging="false" AllowSorting="false"
                                            TItem="ParticipanteEventoDto" Density="Density.Compact">
                                <Columns>
                                    <RadzenDataGridColumn TItem="ParticipanteEventoDto" Property="NomeUsuario" Title="Participante" />
                                    <RadzenDataGridColumn TItem="ParticipanteEventoDto" Property="StatusParticipacao" Title="Status" />
                                    <RadzenDataGridColumn TItem="ParticipanteEventoDto" Context="data" Width="80px" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
                                        <Template Context="participante">
                                            @if (eventoSelecionado?.CriadorId == usuarioLogadoId && participante.UsuarioId != usuarioLogadoId)
                                            {
                                                <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Size="ButtonSize.ExtraSmall"
                                                              Click="@(() => RemoverParticipante(participante.UsuarioId))" Disabled="!isCreator" />
                                            }
                                        </Template>
                                    </RadzenDataGridColumn>
                                </Columns>
                            </RadzenDataGrid>
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenStack>
            </RadzenFieldset>

            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0.5rem" Class="rz-mt-3">
                @* Botões de Ação: Visíveis APENAS para o criador *@
                @if (isCreator)
                {
                    <RadzenButton ButtonType="ButtonType.Submit" Text="Salvar Alterações" Icon="save" Variant="Variant.Flat" />
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Text="Excluir Evento" Icon="delete" Variant="Variant.Flat"
                                  Click="@OnDelete" />
                }
                <RadzenButton ButtonStyle="ButtonStyle.Light" Text="Cancelar" Click="@OnCancel" Variant="Variant.Flat" />
            </RadzenStack>
        </EditForm>
    }
    else
    {
        <RadzenText Text="Carregando detalhes do evento..." TextStyle="TextStyle.Body1" />
    }
</RadzenStack>

@code {
    [Parameter]
    public long EventoId { get; set; }

    private AtualizarEventoRequest eventoRequest;
    private EventoDto? eventoSelecionado;
    private EditContext? editContext;
    private IEnumerable<UsuarioDto> usuariosDisponiveis = new List<UsuarioDto>();
    private long usuarioLogadoId;
    private bool isCreator = false;
    private List<EnumOption<Visibilidade>> VisibilidadeList = EnumHelper.ListarOpcoes<Visibilidade>(incluirNulo: true);

    protected override async Task OnInitializedAsync()
    {
        var usuario = await UsuarioLogadoService.ObterUsuarioAtualAsync();
        if (usuario != null)
        {
            usuarioLogadoId = usuario.Id;
            await CarregarDetalhesEvento();
            isCreator = eventoSelecionado?.CriadorId == usuarioLogadoId; // Define isCreator APÓS eventoSelecionado ser carregado

            usuariosDisponiveis = (await UsuarioApiService.GetAllAsync())?.Where(u => u.Id != usuarioLogadoId).ToList() ?? new List<UsuarioDto>();
        }
        else
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Erro", Detail = "Usuário não autenticado." });
            DialogService.Close(false);
        }

        if (eventoRequest != null)
        {
            editContext = new EditContext(eventoRequest);
        }
    }

    private async Task CarregarDetalhesEvento()
    {
        try
        {
            eventoSelecionado = await AgendaService.ObterEventoPorIdAsync(EventoId, usuarioLogadoId);
            if (eventoSelecionado != null)
            {
                eventoRequest = new AtualizarEventoRequest
                {
                    Id = eventoSelecionado.Id,
                    Titulo = eventoSelecionado.Titulo ?? string.Empty,
                    Descricao = eventoSelecionado.Descricao ?? string.Empty,
                    DataHoraInicio = eventoSelecionado.DataHoraInicio,
                    DataHoraFim = eventoSelecionado.DataHoraFim, // CORRIGIDO: Propriedade consistente com DTO e Request
                    EhRecorrente = eventoSelecionado.EhRecorrente,
                    FrequenciaRecorrencia = eventoSelecionado.FrequenciaRecorrencia,
                    DataFimRecorrencia = eventoSelecionado.DataFimRecorrencia,
                    Visibilidade = eventoSelecionado.Visibilidade,
                    IdsParticipantesConvidados = eventoSelecionado.Participantes?.Select(p => p.UsuarioId).ToList() ?? new List<long>()
                };
            }
            else
            {
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Evento não encontrado", Detail = "O evento selecionado não pôde ser carregado." });
                DialogService.Close(false);
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Erro ao carregar evento", Detail = ex.Message });
            DialogService.Close(false);
        }
    }

    private async Task HandleValidSubmit()
    {
        // NOVO: Executa validações customizadas
        var validationErrors = await ValidateEventoForm(eventoRequest);

        if (validationErrors.Any())
        {
            foreach (var error in validationErrors)
            {
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Erro de Validação", Detail = error });
            }
            return; // Impede a submissão se houver erros de validação
        }

        if (isCreator && editContext?.Validate() == true)
        {
            try
            {
                await AgendaService.AtualizarEventoAsync(eventoRequest, usuarioLogadoId);
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Sucesso", Detail = "Evento atualizado com sucesso!" });
                DialogService.Close(true);
            }
            catch (UnauthorizedAccessException uex)
            {
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Permissão Negada", Detail = uex.Message });
                DialogService.Close(false);
            }
            catch (Exception ex)
            {
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Erro ao atualizar evento", Detail = ex.Message });
                DialogService.Close(false);
            }
        }
        else if (!isCreator)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Permissão", Detail = "Você não tem permissão para salvar edições neste evento." });
        }
        else // Validação falhou
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Validação", Detail = "Por favor, corrija os erros do formulário." });
        }
    }

    // NOVO: Método auxiliar para consolidar todas as validações personalizadas
    private async Task<List<string>> ValidateEventoForm(AtualizarEventoRequest model)
    {
        var errors = new List<string>();

        // Validação de Campos Obrigatórios
        if (string.IsNullOrWhiteSpace(model.Titulo))
        {
            errors.Add("O Título do evento é obrigatório.");
        }
        if (model.DataHoraInicio == default(DateTime))
        {
            errors.Add("A Data e Hora de Início são obrigatórias.");
        }
        if (model.DataHoraFim == default(DateTime)) // Usar DataHoraFim
        {
            errors.Add("A Data e Hora de Término são obrigatórias.");
        }

        // Validação de Comparação de Datas
        if (model.DataHoraInicio != default(DateTime) && model.DataHoraFim != default(DateTime) && model.DataHoraFim <= model.DataHoraInicio) // Usar DataHoraFim
        {
            errors.Add("A data de término deve ser posterior à data de início.");
        }

        // Validação de Tamanho de Descrição
        if (!string.IsNullOrEmpty(model.Descricao) && model.Descricao.Length > 100)
        {
            errors.Add("A Descrição deve ter no máximo 100 caracteres.");
        }

        // Validação de Visibilidade (se você tiver uma regra específica além de obrigatório)
        if (model.Visibilidade == Visibilidade.SomenteConvidados && (model.IdsParticipantesConvidados == null || !model.IdsParticipantesConvidados.Any()))
        {
            errors.Add("Para eventos 'Somente Convidados', pelo menos um participante deve ser selecionado.");
        }

        return errors;
    }

    private async Task RemoverParticipante(long usuarioId)
    {
        if (!isCreator)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Permissão", Detail = "Você não tem permissão para remover participantes." });
            return;
        }

        var confirm = await DialogService.Confirm("Tem certeza que deseja remover este participante?", "Confirmação", new ConfirmOptions { OkButtonText = "Sim", CancelButtonText = "Não" });
        if (confirm == true)
        {
            try
            {
                eventoRequest.IdsParticipantesConvidados = eventoRequest.IdsParticipantesConvidados.Where(id => id != usuarioId).ToList();
                eventoSelecionado.Participantes = eventoSelecionado.Participantes.Where(p => p.UsuarioId != usuarioId).ToList();

                await AgendaService.AtualizarEventoAsync(eventoRequest, usuarioLogadoId);

                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Sucesso", Detail = "Participante removido com sucesso!" });
                await CarregarDetalhesEvento();
            }
            catch (Exception ex)
            {
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Erro ao remover participante", Detail = ex.Message });
            }
        }
    }

    async Task OnDelete()
    {
        if (!isCreator)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Permissão", Detail = "Você não tem permissão para excluir este evento." });
            return;
        }

        var confirm = await DialogService.Confirm("Tem certeza que deseja excluir este evento?", "Confirmação de Exclusão", new ConfirmOptions { OkButtonText = "Sim", CancelButtonText = "Não" });
        if (confirm == true)
        {
            try
            {
                await AgendaService.ExcluirEventoAsync(EventoId, usuarioLogadoId);
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Sucesso", Detail = "Evento excluído com sucesso!" });
                DialogService.Close(true);
            }
            catch (UnauthorizedAccessException uex)
            {
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Permissão Negada", Detail = uex.Message });
                DialogService.Close(false);
            }
            catch (Exception ex)
            {
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Erro ao excluir evento", Detail = ex.Message });
                DialogService.Close(false);
            }
        }
    }

    void OnCancel()
    {
        DialogService.Close(false);
    }
}