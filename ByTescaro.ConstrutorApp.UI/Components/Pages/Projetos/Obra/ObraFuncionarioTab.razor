@using ByTescaro.ConstrutorApp.Application.DTOs
@using ByTescaro.ConstrutorApp.UI.Services
@inject ObraFuncionarioApiService ObraFuncionarioApiService
@inject ObraApiService ObraApiService
@inject NotificationService NotificationService
@inject DialogService DialogService

<RadzenCard Class="pa-4">
    <RadzenHeading Size="H6" Text="Funcionários Alocados na Obra" class="mb-3" />

    

    <RadzenDropDown TValue="IEnumerable<long>"
                    Data="@FuncionariosDisponiveis"
                    TextProperty="Nome"
                    ValueProperty="Id"
                    Placeholder="Selecionar Funcionários"
                    Multiple="true"
                    SelectAllText="Selecionar Todos"
                    Style="width: 100%;"
                    Class="rz-mb-2"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    FilterOperator="StringFilterOperator.StartsWith"
                    AllowFiltering="true"
                    @bind-Value="_funcionariosSelecionados" />


    <RadzenRow Style="margin-bottom: 1rem; gap: 0.5rem">
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenButton Text="Adicionar Selecionados" Icon="add_circle_outline" Style="width: 100%;"
                          Disabled="@(!_funcionariosSelecionados.Any())"
                          Click="@AdicionarFuncionarios" />
        </RadzenColumn>

        <RadzenColumn Size="12" SizeMD="6">
            <RadzenButton Text="Salvar Funcionários" Icon="save" ButtonStyle="ButtonStyle.Primary"
                          Style="width: 100%;"
                          Click="SalvarFuncionariosAsync" Disabled="@IsBotaoSalvarDesabilitado" />
        </RadzenColumn>
    </RadzenRow>

    <RadzenDivider Style="margin: 1rem 0;" />

    @if (Obra.Funcionarios?.Any() == true)
    {
        <RadzenDataGrid Data="@Obra.Funcionarios" TItem="ObraFuncionarioDto" ShowPagingSummary="false" PageSize="10" Responsive="true">
            <Columns>
                <RadzenDataGridColumn TItem="ObraFuncionarioDto" Property="FuncionarioNome" Title="Nome" />
                <RadzenDataGridColumn TItem="ObraFuncionarioDto" Property="FuncaoNoObra" Title="Função" />
                <RadzenDataGridColumn TItem="ObraFuncionarioDto" Property="DataInicio" Title="Início" FormatString="{0:dd/MM/yyyy}" />
                <RadzenDataGridColumn TItem="ObraFuncionarioDto" Property="DataFim" Title="Fim" FormatString="{0:dd/MM/yyyy}" />

                <RadzenDataGridColumn TItem="ObraFuncionarioDto">
                    <Template Context="funcionario">
                        <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Small" Click="@(() => ConfirmarRemocao(funcionario))" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    }
    else
    {
        <RadzenText Text="Nenhum funcionário adicionado à obra." />
    }


</RadzenCard>

@code {
    [Parameter] public ObraDto Obra { get; set; } = new();
    [Parameter] public List<FuncionarioDto> FuncionariosDisponiveis { get; set; } = new();
    private bool IsBotaoSalvarDesabilitado => Obra.Funcionarios == null || !Obra.Funcionarios.Any();
    private List<ObraFuncionarioDto> _funcionariosOriginais = new();
    private IEnumerable<long> _funcionariosSelecionados = Array.Empty<long>();
    private long _lastObraIdCarregado = 0;

    private bool isLoading = true;



    private async Task AdicionarFuncionarios()
    {
        if (Obra.Funcionarios == null)
            Obra.Funcionarios = new List<ObraFuncionarioDto>();

        var novos = new List<ObraFuncionarioDto>();

        foreach (var id in _funcionariosSelecionados)
        {
            if (Obra.Funcionarios.Any(f => f.FuncionarioId == id))
                continue;

            var funcionario = FuncionariosDisponiveis.FirstOrDefault(f => f.Id == id);
            if (funcionario is not null)
            {
                novos.Add(new ObraFuncionarioDto
                    {
                        ObraId = Obra.Id,
                        FuncionarioId = funcionario.Id,
                        FuncionarioNome = funcionario.Nome,
                        FuncaoNoObra = funcionario.FuncaoNome ?? string.Empty,
                        DataInicio = DateTime.Today
                    });
            }
        }

        if (novos.Any())
        {
            // 🔁 recria a lista
            Obra.Funcionarios = Obra.Funcionarios.Concat(novos).ToList();
        }

    }


    private async Task ConfirmarRemocao(ObraFuncionarioDto funcionario)
    {

        var insumosFunc = Obra.ListasInsumo.Where(x => x.ResponsavelId == funcionario.FuncionarioId).ToList();
        var servicosFunc = Obra.ListasServico.Where(x => x.ResponsavelId == funcionario.FuncionarioId).ToList();
        if(Obra.ResponsavelObraId == funcionario.FuncionarioId)
        {
            NotificationService.Notify(NotificationSeverity.Warning, "Atenção", $"O funcionário '{funcionario.FuncionarioNome}' não pode ser removido pois é Responsável pela Obra.");
            return;
        }

        if (insumosFunc.Any())
        {
            NotificationService.Notify(NotificationSeverity.Warning, "Atenção", $"O funcionário '{funcionario.FuncionarioNome}' não pode ser removido pois possui insumos em sua responsabilidade.");
            return;
        }

        if (servicosFunc.Any())
        {
            NotificationService.Notify(NotificationSeverity.Warning, "Atenção", $"O funcionário '{funcionario.FuncionarioNome}' não pode ser removido pois possui servicos em sua responsabilidade.");
            return;
        }


        bool? confirm = await DialogService.Confirm($"Deseja realmente remover o funcionário '{funcionario.FuncionarioNome}'?", "Remover Funcionário");

        if (confirm == true)
        {
            Obra.Funcionarios = Obra.Funcionarios
                        .Where(f => f.FuncionarioId != funcionario.FuncionarioId)
                        .ToList();

            NotificationService.Notify(NotificationSeverity.Warning, "Removido", "Funcionário removido da lista.");

            StateHasChanged();

        }
    }

    /// OnParametersSetAsync é usado para carregar os dados do checklist
    /// sempre que os parâmetros do componente (como 'Obra') forem definidos.
    /// </summary>
    protected override async Task OnParametersSetAsync()
    {
        if (Obra?.Id > 0 && Obra.Id != _lastObraIdCarregado)
        {
            // 1) Carrega funcionários da obra pelo endpoint dedicado
            var lista = await ObraFuncionarioApiService.GetByObraIdAsync(Obra.Id)
                        ?? new List<ObraFuncionarioDto>();

            Obra.Funcionarios = lista.ToList();
            _funcionariosOriginais = lista.Select(f => new ObraFuncionarioDto
            {
                Id = f.Id,
                FuncionarioId = f.FuncionarioId,
                ObraId = f.ObraId,
                FuncionarioNome = f.FuncionarioNome,
                FuncaoNoObra = f.FuncaoNoObra,
                DataInicio = f.DataInicio,
                DataFim = f.DataFim
            }).ToList();

            _lastObraIdCarregado = Obra.Id;
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // Carrega catálogo de funcionários disponíveis (se o pai não passou)
        if (FuncionariosDisponiveis == null || FuncionariosDisponiveis.Count == 0)
            FuncionariosDisponiveis = await ObraFuncionarioApiService.GetFuncionariosTotalDisponiveisAsync();
    }

    private async Task SalvarFuncionariosAsync()
    {
        var validationErrors = await ValidateForm(Obra);
        if (validationErrors.Any())
        {
            foreach (var err in validationErrors)
                NotificationService.Notify(NotificationSeverity.Error, "Erro de Validação", err);
            return;
        }

        try
        {
            // Upserts
            foreach (var f in Obra.Funcionarios)
            {
                f.ObraId = Obra.Id;

                if (f.Id == 0)
                    await ObraFuncionarioApiService.CreateAsync(f); // ideal: service retornar DTO com Id
                else
                    await ObraFuncionarioApiService.UpdateAsync(f);
            }

            // Remoções (comparam por vínculo/Id)
            var idsAtuais = Obra.Funcionarios.Select(x => x.Id).ToHashSet();
            var removidos = _funcionariosOriginais.Where(x => !idsAtuais.Contains(x.Id) && x.Id > 0).ToList();
            foreach (var r in removidos)
                await ObraFuncionarioApiService.DeleteAsync(r.Id);

            // 🔄 Recarregar do endpoint dedicado pra consolidar IDs/estado
            var lista = await ObraFuncionarioApiService.GetByObraIdAsync(Obra.Id) ?? new();
            Obra.Funcionarios = lista.ToList();
            _funcionariosOriginais = lista.ToList();

            NotificationService.Notify(NotificationSeverity.Success, "Sucesso", "Funcionários salvos com sucesso.");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Erro", $"Erro ao salvar funcionários: {ex.Message}");
        }
    }

    private Task<List<string>> ValidateForm(ObraDto model)
    {
        var errors = new List<string>();

        if (string.IsNullOrWhiteSpace(model.Nome))
            errors.Add("Campo Nome da Obra é obrigatório.");

        if (model.ResponsavelMaterial == null)
            errors.Add("Selecione o Responsável Materiais.");

        if (model.ResponsavelObraId == null)
            errors.Add("Selecione o Responsável Obra.");

        if (model.Funcionarios == null || !model.Funcionarios.Any())
            errors.Add("Adicione ao menos um funcionário.");

        foreach (var f in model.Funcionarios ?? Enumerable.Empty<ObraFuncionarioDto>())
        {
            if (f.DataInicio == default)
                errors.Add($"Funcionário '{f.FuncionarioNome}' está sem data de início.");
            if (f.DataFim.HasValue && f.DataFim < f.DataInicio)
                errors.Add($"Funcionário '{f.FuncionarioNome}' possui data de fim anterior à de início.");
        }

        return Task.FromResult(errors);
    }

}