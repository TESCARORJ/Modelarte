@page "/fornecedor/novo"
@page "/fornecedor/editar/{Id:long}"

@using ByTescaro.ConstrutorApp.Application.DTOs
@using ByTescaro.ConstrutorApp.Domain.Enums
@using ByTescaro.ConstrutorApp.Application.Utils
@using ByTescaro.ConstrutorApp.UI.Services
@using Microsoft.AspNetCore.Authorization
@inject FornecedorApiService FornecedorApiService
@inject NavigationManager Navigation
@inject NotificationService NotificationService
@attribute [Authorize]

<PageTitle>Fornecedor</PageTitle>

<RadzenCard Class="rz-mt-5 rz-p-4 rz-shadow-md rz-rounded-md rz-mx-auto" Style="max-width: 1300px; width: 100%;">
    <RadzenTemplateForm TItem="FornecedorDto" Data="@fornecedor" Submit="Salvar" InvalidSubmit="ExibirErros">
        <RadzenHeading Size="H4" Text="@(Id == 0 ? "Novo Fornecedor" : "Editar Fornecedor")" Class="rz-mb-3" />

        <RadzenFieldset Text="Dados do Fornecedor" Style="margin-bottom: 1.5rem">
            <RadzenRow>
                <RadzenColumn Size="12" SizeMD="6">
                    <RadzenLabel Text="Nome *" />
                    <RadzenTextBox @bind-Value="fornecedor.Nome" Name="Nome" Style="width: 100%;" />
                    <RadzenRequiredValidator Component="Nome" Text="Nome obrigatório" />
                </RadzenColumn>

                <RadzenColumn Size="12" SizeMD="3">
                    <RadzenLabel Text="Tipo de Fornecedor *" />
                    <RadzenDropDown @bind-Value="fornecedor.Tipo"
                                    TValue="TipoFornecedor?"
                                    Data="@tipoFornecedorOptions"
                                    TextProperty="Label"
                                    ValueProperty="Value"
                                    Name="Tipo"
                                    Style="width: 100%;" />
                    <RadzenRequiredValidator Component="Tipo" Text="Obrigatório" />
                </RadzenColumn>

                <RadzenColumn Size="12" SizeMD="3">
                    <RadzenLabel Text="CPF/CNPJ *" />
                    <RadzenMask @bind-Value="fornecedor.CpfCnpj"
                                Mask="**.***.***/****-**"
                                CharacterPattern="[0-9]"
                                Placeholder="00.000.000/0000-00"
                                Name="CpfCnpj"
                                Style="width: 100%;" />
                    <RadzenRequiredValidator Component="CpfCnpj" Text="Obrigatório" />
                </RadzenColumn>
            </RadzenRow>
        </RadzenFieldset>

        <RadzenFieldset Text="Contato" Style="margin-bottom: 1.5rem">
            <RadzenRow>
                <RadzenColumn Size="12" SizeMD="4">
                    <RadzenLabel Text="Telefone Principal" />
                    <RadzenMask @bind-Value="fornecedor.TelefonePrincipal"
                                Mask="(**) *****-****"
                                CharacterPattern="[0-9]"
                                Placeholder="(00) 00000-0000"
                                Name="Telefone"
                                Style="width: 100%;" />
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="4">
                    <RadzenLabel Text="WhatsApp" />
                    <RadzenMask @bind-Value="fornecedor.TelefoneWhatsApp"
                                Mask="(**) *****-****"
                                CharacterPattern="[0-9]"
                                Placeholder="(00) 00000-0000"
                                Name="WhatsApp"
                                Style="width: 100%;" />
                </RadzenColumn>

                <RadzenColumn Size="12" SizeMD="4">
                    <RadzenLabel Text="Email" />
                    <RadzenTextBox @bind-Value="fornecedor.Email" Name="Email" Style="width: 100%;" />
                </RadzenColumn>
            </RadzenRow>
        </RadzenFieldset>

        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="1rem" Class="rz-mt-3">
            <RadzenButton Text="Cancelar" ButtonStyle="ButtonStyle.Light" Click="@Cancelar" />
            <RadzenButton Text="Salvar" ButtonType="ButtonType.Submit" Icon="save" Style="min-width: 120px;" />
        </RadzenStack>
    </RadzenTemplateForm>
</RadzenCard>

@code {
    [Parameter] public long Id { get; set; }

    private FornecedorDto fornecedor = new();

    private List<EnumOption<TipoFornecedor>> tipoFornecedorOptions = EnumHelper.ListarOpcoes<TipoFornecedor>(incluirNulo: true);

    protected override async Task OnInitializedAsync()
    {
        if (Id != 0)
        {
            var existente = await FornecedorApiService.GetByIdAsync(Id);
            if (existente is not null)
                fornecedor = existente;
        }
    }

    private async Task Salvar(FornecedorDto model)
    {
        // === VALIDAÇÃO MANUAL DO CPF/CNPJ E TIPO DE PESSOA ===
        bool isFormValid = true; // Flag para controlar se o formulário é válido.

        // 1. Validação do Tipo de Pessoa (já que é obrigatório)
        if (!model.TipoPessoa.HasValue)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Erro de Validação", Detail = "Tipo de Pessoa é obrigatório.", Duration = 5000 });
            isFormValid = false;
        }

        // 2. Validação do CPF/CNPJ (apenas se o campo CpfCnpj não estiver vazio e o TipoPessoa estiver definido)
        if (isFormValid && !string.IsNullOrWhiteSpace(model.CpfCnpj) && model.TipoPessoa.HasValue)
        {
            if (!CpfCnpjValidator.IsCpfCnpjValid(model.CpfCnpj, model.TipoPessoa))
            {
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Erro de Validação", Detail = "CPF/CNPJ inválido para o tipo de pessoa selecionado.", Duration = 5000 });
                isFormValid = false;
            }
        }
        else if (isFormValid && string.IsNullOrWhiteSpace(model.CpfCnpj))
        {
            // Se CpfCnpj estiver vazio, e for obrigatório (como indicado pelo RadzenRequiredValidator),
            // a validação do RadzenTemplateForm já irá capturar isso.
            // Não precisamos de uma notificação extra aqui.
            // isFormValid permanecerá true se apenas o campo CpfCnpj estiver vazio e não houver outros erros.
        }

        // Se alguma validação manual falhou, interrompa a execução
        if (!isFormValid)
        {
            // O RadzenTemplateForm já exibirá os erros dos RequiredValidators.
            // Para erros de CustomValidator, a notificação já foi enviada.
            return;
        }


        try
        {
            if (model.Id == 0)
            {
                await FornecedorApiService.CreateAsync(model);
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Sucesso", Detail = "Fornecedor cadastrado com sucesso!", Duration = 4000 });
            }
            else
            {
                await FornecedorApiService.UpdateAsync(model);
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Sucesso", Detail = "Fornecedor atualizado com sucesso!", Duration = 4000 });
            }

            Navigation.NavigateTo("/fornecedores");
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Erro", Detail = $"Erro ao salvar fornecedor: {ex.Message}", Duration = 5000 });
        }
    }

    private void ExibirErros()
    {
        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Atenção", Detail = "Existem erros de validação no formulário.", Duration = 4000 });
    }

    private void Cancelar()
    {
        Navigation.NavigateTo("/fornecedores");
    }
}
