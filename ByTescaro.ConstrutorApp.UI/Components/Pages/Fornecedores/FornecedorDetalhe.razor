@page "/fornecedor/detalhes/{Id:long}"

@using ByTescaro.ConstrutorApp.Application.DTOs
@using ByTescaro.ConstrutorApp.Application.Utils 
@using ByTescaro.ConstrutorApp.Domain.Enums
@using ByTescaro.ConstrutorApp.UI.Components.Pages
@using ByTescaro.ConstrutorApp.UI.Services
@using Microsoft.AspNetCore.Authorization
@using Radzen 
@using Radzen.Blazor 
@inject FornecedorApiService FornecedorApiService
@inject FornecedorInsumoApiService FornecedorInsumoApiService
@inject FornecedorServicoApiService FornecedorServicoApiService
@inject NavigationManager Navigation
@attribute [Authorize]

<PageTitle>Detalhes do Fornecedor</PageTitle>

<RadzenCard Class="rz-mt-5 rz-p-4 rz-shadow-md rz-rounded-md rz-mx-auto" Style="max-width: 1300px; width: 100%;">
    <RadzenHeading Size="H4" Text="@Titulo" Class="rz-mb-3" /> @* Título dinâmico *@

    @if (fornecedor is null)
    {
        <RadzenText Text="Carregando detalhes do fornecedor ou fornecedor não encontrado." Style="color: gray; padding: 1rem;" />
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-top: 10px;" />
    }
    else
    {
        <RadzenFieldset Text="Dados do Fornecedor" Style="margin-bottom: 1.5rem">
            <RadzenRow>
                <RadzenColumn Size="12" SizeMD="4">
                    <RadzenText TextStyle="TextStyle.Body1">
                        <strong>Nome:</strong> <span>@fornecedor.Nome</span>
                    </RadzenText>
                </RadzenColumn>

                <RadzenColumn Size="12" SizeMD="3">
                    <RadzenText TextStyle="TextStyle.Body1">
                        <strong>Tipo de Fornecedor:</strong> <span>@(fornecedor.TipoFornecedor.HasValue? EnumHelper.ObterDescricaoEnum(fornecedor.TipoFornecedor.Value) : string.Empty)</span>
                    </RadzenText>
                </RadzenColumn>

                <RadzenColumn Size="12" SizeMD="2">
                    <RadzenText TextStyle="TextStyle.Body1">
                        <strong>Tipo de Pessoa:</strong> <span>@(fornecedor.TipoPessoa.HasValue ? EnumHelper.ObterDescricaoEnum(fornecedor.TipoPessoa.Value) : string.Empty)</span>
                    </RadzenText>
                </RadzenColumn>

                <RadzenColumn Size="12" SizeMD="3">
                    <RadzenText TextStyle="TextStyle.Body1">
                        <strong>CPF/CNPJ:</strong> <span>@fornecedor.CpfCnpj</span>
                    </RadzenText>
                </RadzenColumn>
            </RadzenRow>
        </RadzenFieldset>

        <RadzenFieldset Text="Contato" Style="margin-bottom: 1.5rem">
            <RadzenRow>
                <RadzenColumn Size="12" SizeMD="4">
                    <RadzenText TextStyle="TextStyle.Body1">
                        <strong>Telefone Principal:</strong> <span>@fornecedor.TelefonePrincipal</span>
                    </RadzenText>
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="4">
                    <RadzenText TextStyle="TextStyle.Body1">
                        <strong>WhatsApp:</strong> <span>@fornecedor.TelefoneWhatsApp</span>
                    </RadzenText>
                </RadzenColumn>

                <RadzenColumn Size="12" SizeMD="4">
                    <RadzenText TextStyle="TextStyle.Body1">
                        <strong>Email:</strong> <span>@fornecedor.Email</span>
                    </RadzenText>
                </RadzenColumn>
            </RadzenRow>
        </RadzenFieldset>

        <RadzenFieldset Text="Dados de Auditoria" Style="margin-bottom: 1.5rem;">
            <RadzenRow>
                <RadzenColumn Size="12" SizeMD="6">
                    <RadzenText TextStyle="TextStyle.Body1">
                        <strong>Usuário Cadastro:</strong> <span>@fornecedor.UsuarioCadastroNome</span> @* Assumindo que UsuarioCadastro é o nome do usuário *@
                    </RadzenText>
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="6">
                    <RadzenText TextStyle="TextStyle.Body1">
                        <strong>Data/Hora Cadastro:</strong> <span>@fornecedor.DataHoraCadastro.ToString("dd/MM/yyyy HH:mm:ss")</span>
                    </RadzenText>
                </RadzenColumn>

            </RadzenRow>
        </RadzenFieldset>

        @* Você pode adicionar um Fieldset de Endereço aqui, se o DTO tiver esses campos *@
      @*   @if (!string.IsNullOrWhiteSpace(fornecedor.CEP))
        {
            <RadzenFieldset Text="Endereço" Style="margin-bottom: 1.5rem">
                <RadzenRow>
                    <RadzenColumn Size="12" SizeMD="3">
                        <RadzenText TextStyle="TextStyle.Body1">
                            <strong>CEP:</strong> <span>@fornecedor.CEP</span>
                        </RadzenText>
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="6">
                        <RadzenText TextStyle="TextStyle.Body1">
                            <strong>Logradouro:</strong> <span>@fornecedor.Logradouro</span>
                        </RadzenText>
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="3">
                        <RadzenText TextStyle="TextStyle.Body1">
                            <strong>Número:</strong> <span>@fornecedor.Numero</span>
                        </RadzenText>
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="4">
                        <RadzenText TextStyle="TextStyle.Body1">
                            <strong>Complemento:</strong> <span>@fornecedor.Complemento</span>
                        </RadzenText>
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="4">
                        <RadzenText TextStyle="TextStyle.Body1">
                            <strong>Bairro:</strong> <span>@fornecedor.Bairro</span>
                        </RadzenText>
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="4">
                        <RadzenText TextStyle="TextStyle.Body1">
                            <strong>Cidade:</strong> <span>@fornecedor.Cidade</span>
                        </RadzenText>
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="6">
                        <RadzenText TextStyle="TextStyle.Body1">
                            <strong>Estado:</strong> <span>@fornecedor.Estado</span>
                        </RadzenText>
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="2">
                        <RadzenText TextStyle="TextStyle.Body1">
                            <strong>UF:</strong> <span>@fornecedor.UF</span>
                        </RadzenText>
                    </RadzenColumn>
                </RadzenRow>
            </RadzenFieldset>
        }
 *@

        @* Grid de Insumos fornecidos *@        
                    @if (fornecedor.TipoFornecedor.HasValue && (fornecedor.TipoFornecedor.Value == TipoFornecedor.Material || fornecedor.TipoFornecedor.Value == TipoFornecedor.Misto))
        {
            <FornecedorInsumoGrid @ref="insumoGrid" FornecedorId="@fornecedor.Id" OnInsumosCarregados="HandleInsumosCarregados" />

            <RadzenCard Style="margin-top: 2rem;">
                <RadzenHeading Size="H6" Text="Resumo de Insumos" />
                <RadzenRow Class="rz-p-2">                    
                    <RadzenColumn Size="12" SizeMD="6">
                        <RadzenText TextStyle="TextStyle.Body1">
                            <strong>Total de Insumos:</strong> <span>@($"{qtdeInsumos} itens - R$ {totalInsumos:N2}")</span>
                        </RadzenText>
                    </RadzenColumn>
                </RadzenRow>
            </RadzenCard>
        }

        @* Grid de Serviços fornecidos *@
        @if (fornecedor.TipoFornecedor.HasValue && (fornecedor.TipoFornecedor.Value == TipoFornecedor.Servico || fornecedor.TipoFornecedor.Value == TipoFornecedor.Misto))
        {
            <FornecedorServicoGrid @ref="servicoGrid" FornecedorId="@fornecedor.Id" OnServicosCarregados="HandleServicosCarregados"  />

            <RadzenCard Style="margin-top: 2rem;">
                <RadzenHeading Size="H6" Text="Resumo de Serviços" />
                <RadzenRow Class="rz-p-2">                    
                    <RadzenColumn Size="12" SizeMD="6">
                        <RadzenText TextStyle="TextStyle.Body1">
                            <strong>Total de Serviços:</strong> <span>@($"{qtdeServicos} itens - R$ {totalServicos:N2}")</span>
                        </RadzenText>
                    </RadzenColumn>
                </RadzenRow>
            </RadzenCard>
        }

        <RadzenDivider Style="margin: 2rem 0;" />

        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="1rem" Class="rz-mt-3">
            <RadzenButton Text="Voltar"
                          Click="@(() => Navigation.NavigateTo("/fornecedores"))"
                          ButtonStyle="ButtonStyle.Light" />

            <RadzenButton Text="Editar"
                          Icon="edit"
                          Click="@(() => Navigation.NavigateTo($"/fornecedor/editar/{fornecedor.Id}"))"
                          ButtonStyle="ButtonStyle.Primary" />
        </RadzenStack>
    }
</RadzenCard>

@code {
    [Parameter]
    public long Id { get; set; }
    
    private FornecedorDto? fornecedor;
    private string Titulo => $"Detalhes do Fornecedor: {fornecedor?.Nome ?? "Carregando..."}";

    private int qtdeInsumos;
    private decimal totalInsumos = 0;
    private int qtdeServicos;
    private decimal totalServicos = 0;

    FornecedorInsumoGrid? insumoGrid;
    FornecedorServicoGrid? servicoGrid;

    protected override async Task OnInitializedAsync()
    {
        fornecedor = await FornecedorApiService.GetByIdAsync(Id);
    }

    private void HandleInsumosCarregados(List<FornecedorInsumoDto> insumos)
    {
        qtdeInsumos = insumos.Count;
        totalInsumos = insumos.Sum(i => i.PrecoUnitario);
        StateHasChanged();
    }

    private void HandleServicosCarregados(List<FornecedorServicoDto> servicos)
    {
        qtdeServicos = servicos.Count;
        totalServicos = servicos.Sum(s => s.PrecoUnitario);
        StateHasChanged();
    }
}