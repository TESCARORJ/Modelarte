@using ByTescaro.ConstrutorApp.Application.DTOs
@using ByTescaro.ConstrutorApp.UI.Services
@inject DialogService DialogService
@inject ObraItemEtapaPadraoApiService ObraItemEtapaPadraoApiService
@inject NotificationService NotificationService

<RadzenTemplateForm TItem="ObraItemEtapaPadraoDto" Data="@novoItem" Submit="@OnSubmit">
    <RadzenCard Class="rz-p-4">
        <RadzenText TextStyle="TextStyle.H6" Text="Criar Novo Item de Etapa Padrão" Class="rz-mb-4" />

        <RadzenStack Gap="1rem">
            <RadzenFormField Text="Nome do Item" Variant="Variant.Flat">
                <RadzenTextBox @bind-Value="novoItem.Nome" Style="width: 100%;" />
            </RadzenFormField>

            <RadzenFormField Text="Ordem" Variant="Variant.Flat">
                <RadzenNumeric TValue="int" @bind-Value="novoItem.Ordem" Min="1" Style="width: 100%;" />
            </RadzenFormField>

            <RadzenFormField Text="Dias para Prazo (opcional)" Variant="Variant.Flat">
                <RadzenNumeric TValue="int?" @bind-Value="novoItem.DiasPrazo" Min="0" Style="width: 100%;" />
            </RadzenFormField>

           
            <div class="rz-p-12 rz-text-align-center">
                <RadzenCheckBox @bind-Value="novoItem.IsDataPrazo" Name="CheckBox1" />
                <RadzenLabel Text="Usar data de prazo (calcular com base nos dias)" Component="CheckBox1" class="rz-ms-2" />
            </div>
        </RadzenStack>

        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0.5rem" Class="rz-mt-4">
            <RadzenButton ButtonType="ButtonType.Submit" Text="Salvar" Icon="save" ButtonStyle="ButtonStyle.Primary" />
            <RadzenButton Text="Cancelar" Icon="cancel" ButtonStyle="ButtonStyle.Light" Click="@Cancel" />
        </RadzenStack>
    </RadzenCard>
</RadzenTemplateForm>

@code {
    [Parameter] public ObraEtapaPadraoDto ObraEtapa { get; set; } // Agora recebe ObraEtapaPadraoDto

    ObraItemEtapaPadraoDto novoItem = new();

    protected override void OnInitialized()
    {
        // Preenche o ID da etapa padrão no novo item
        novoItem.ObraEtapaPadraoId = ObraEtapa?.Id ?? 0;
        // Define uma ordem inicial, por exemplo, o próximo número disponível
        novoItem.Ordem = (ObraEtapa?.Itens?.Any() ?? false) ? ObraEtapa.Itens.Max(i => i.Ordem) + 1 : 1;
    }

    private async Task OnSubmit()
    {
        if (string.IsNullOrWhiteSpace(novoItem.Nome) || novoItem.Ordem <= 0 || novoItem.ObraEtapaPadraoId == 0)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Erro de Validação", "Nome, Ordem e Etapa Padrão são obrigatórios.");
            return;
        }

        try
        {
            // Persiste o novo ObraItemEtapaPadraoDto no backend
            var itemCriado = await ObraItemEtapaPadraoApiService.CreateAsync(novoItem);
            NotificationService.Notify(NotificationSeverity.Success, "Sucesso", "Item padrão de etapa criado com sucesso.");
            DialogService.Close(itemCriado); // Retorna o item padrão criado
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Erro", $"Erro ao criar item padrão de etapa: {ex.Message}");
        }
    }

    void Cancel()
    {
        DialogService.Close(null);
    }
}