@using ByTescaro.ConstrutorApp.Application.DTOs
@using ByTescaro.ConstrutorApp.Domain.Enums
@using ByTescaro.ConstrutorApp.UI.Components.Utils
@using ByTescaro.ConstrutorApp.UI.Services
@using ByTescaro.ConstrutorApp.Application.Interfaces
@inject ObraFuncionarioApiService ObraFuncionarioApiService
@inject FuncionarioApiService FuncionarioApiService
@inject UsuarioApiService UsuarioApiService
@inject ObraApiService ObraApiService
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject TooltipService TooltipService
@inject IRelatorioObraService RelatorioObraService
@inject INotificationService ZApiNotificationService
@inject ZApiGroupApiService ZApiGroupApiService // Novo serviço injetado

<style>
        ul[role="tablist"] {
                display: flex !important;
                flex-wrap: wrap;
                justify-content: center;
                padding: 0;
                margin: 0;
                gap: 0.5rem;

    }

            ul[role="tablist"] li {
                    flex: 1 1 auto;
                    text-align: center;
                    min-width: 120px;

    }

                ul[role="tablist"] li a {
                        display: block;
                        padding: 0.75rem 1rem;
                        font-weight: 500;
                        border-radius: 8px;
                        transition: background-color 0.2s;

    }

                    ul[role="tablist"] li a:hover {
                            background-color: #f0f0f0;

    }

        .form-field {
                margin-bottom: 1rem;

    }

        .obra-form-row {
                align-items: end;
                margin-bottom: 1rem;

    }
</style>

<RadzenAccordionItem Text="@TituloObra" @key="Obra.Id > 0 ? Obra.Id : Obra.GetHashCode()">
    <RadzenRow class="obra-form-row">
        <RadzenColumn Size="12" SizeMD="3" Style="padding-right: 1rem;">
            <RadzenLabel Text="Nome da Obra *" />
            <RadzenTextBox @bind-Value="Obra.Nome" Name="@GetUniqueName("NomeObra")" Style="width: 100%;" />
        </RadzenColumn>

        <RadzenColumn Size="12" SizeMD="3" Style="padding-right: 1rem;">
            <RadzenLabel Text="Responsável Obra *" />
            <RadzenDropDown Data="@allSelectableUsers"
                                          TextProperty="Nome"
                                          ValueProperty="Id"
                                          @bind-Value="Obra.ResponsavelObraId"
                                          Name="@GetUniqueName("ResponsavelObra")"
                                          AllowFiltering="true"
                                          AllowClear="true"
                                          Placeholder="Selecionar Responsável"
                                          Style="width: 100%;" />
        </RadzenColumn>

        <RadzenColumn Size="12" SizeMD="3" Style="padding-right: 1rem;">
            <RadzenLabel Text="Responsável Materiais *" />
            <RadzenDropDown @bind-Value="Obra.ResponsavelMaterial"
                                          TValue="ResponsavelMaterialEnum?"
                                          Name="@GetUniqueName("ResponsavelMaterial")"
                                          Data="@ResponsavelOptions"
                                          TextProperty="Label" ValueProperty="Value"
                                          Style="width: 100%;" />
        </RadzenColumn>

        <RadzenColumn Size="12" SizeMD="3" Style="padding-right: 1rem;">
            <RadzenLabel Text="Data Início Execução *" />
            <RadzenDatePicker @bind-Value="Obra.DataInicioExecucao" ShowTime="false" DateFormat="dd/MM/yyyy"
                                             Style="width:100%;" Name="DataInicioExecucao" />
        </RadzenColumn>

        <RadzenColumn Size="12" SizeMD="3">
            <RadzenLabel Text="Status da Obra *" />
            <RadzenDropDown @bind-Value="Obra.Status"
                                          TValue="StatusObra?"
                                          Name="@GetUniqueName("StatusObra")"
                                          Data="@StatusOptions"
                                          TextProperty="Label" ValueProperty="Value"
                                          Style="width: 100%;" />
        </RadzenColumn>
    </RadzenRow>

    <RadzenRow>
        <RadzenColumn Size="12" class="d-flex justify-content-end" Style="margin-top: 1.5rem;">

            <RadzenButton Text="Gerar Relatório PDF"
                                       Icon="picture_as_pdf"
                                       ButtonStyle="ButtonStyle.Primary"
                                       Click="GerarRelatorioPdf"
                                       Style="margin-right: 1rem;" />

            <RadzenButton Text="Enviar Relatório WhatsApp"
                                       ButtonStyle="ButtonStyle.Success"
                                       Click="OpenSendReportModal"
                                       Disabled="@(Obra.Id == 0 || !allSelectableUsers.Any())"
                                       Style="margin-right: 1rem;" />

            <RadzenButton Text="Salvar Alterações na Obra"
                                       Icon="save"
                                       ButtonStyle="ButtonStyle.Primary"
                                       Click="SalvarObraAsync"
                                       IsBusy="@isSaving"
                                       Style="margin-right: 1rem;" />

            <RadzenButton Text="Remover Obra"
                                       Icon="delete"
                                       ButtonStyle="ButtonStyle.Danger"
                                       Click="@(() => ConfirmarRemocaoObra(Obra.Id))"
                                       Disabled="@(isSaving || Obra.Id == 0)" />
        </RadzenColumn>
    </RadzenRow>

    <RadzenTabs Class="rz-mt-4">
        <Tabs>
            <RadzenTabsItem Text="Checklist"><ChecklistObraTab Obra="@Obra" /></RadzenTabsItem>
            <RadzenTabsItem Text="Funcionários"><ObraFuncionarioTab Obra="@Obra" /></RadzenTabsItem>
            <RadzenTabsItem Text="Equipamentos"><ObraEquipamentoTab Obra="@Obra" /></RadzenTabsItem>
            <RadzenTabsItem Text="Insumos"><ObraInsumoTab Obra="@Obra" /></RadzenTabsItem>
            <RadzenTabsItem Text="Serviços"><ObraServicoTab Obra="@Obra" /></RadzenTabsItem>
            <RadzenTabsItem Text="Documentos"><DocumentosObraTab Obra="@Obra" /></RadzenTabsItem>
            <RadzenTabsItem Text="Imagens"><ImagensObraTab Obra="@Obra" /></RadzenTabsItem>
            <RadzenTabsItem Text="Retrabalhos"><RetrabalhoObraTab Obra="@Obra" /></RadzenTabsItem>
            <RadzenTabsItem Text="Pendências"><PendenciaObraTab Obra="@Obra" /></RadzenTabsItem>
        </Tabs>
    </RadzenTabs>
</RadzenAccordionItem>

@code {
    [Parameter] public ObraDto Obra { get; set; } = new();
    [Parameter] public string? TituloObra { get; set; } = string.Empty;
    [Parameter] public List<object> ResponsavelOptions { get; set; } = new();
    [Parameter] public List<object> StatusOptions { get; set; } = new();
    [Parameter] public EventCallback<ObraDto> OnRemover { get; set; }

    private List<SelectableUserDto> allSelectableUsers = new();
    private bool isSaving = false;
    private readonly string _componentId = Guid.NewGuid().ToString("N");

    private string GetUniqueName(string baseName) => $"{baseName}_{_componentId}";

    protected override async Task OnInitializedAsync()
    {
        // Busca funcionários com WhatsApp
        var funcionarios = (await FuncionarioApiService.GetAllAtivosAsync())
      .Where(f => !string.IsNullOrEmpty(f.TelefoneWhatsApp))
      .Select(f => new SelectableUserDto
      {
          Id = f.Id,
          Nome = f.Nome,
          TelefoneWhatsApp = f.TelefoneWhatsApp,
          IsGroup = false
      }).ToList();

        // Busca usuários com WhatsApp
        var usuarios = (await UsuarioApiService.GetAllAtivosAsync())
      .Where(u => !string.IsNullOrEmpty(u.TelefoneWhatsApp))
      .Select(u => new SelectableUserDto
      {
          Id = u.Id,
          Nome = u.Nome,
          TelefoneWhatsApp = u.TelefoneWhatsApp,
          IsGroup = false
      }).ToList();

//         // Busca grupos do Z-API
//         try
//         {
//             var grupos = await ZApiGroupApiService.GetGroupsAsync();
//             var selectableGroups = grupos.Select(g => new SelectableUserDto
//             {
//                 // Um Group ID pode ser maior que long. MaxValue, então usei um hashcode
//                 Id = g.Phone.GetHashCode(),
//                 Nome = $"{g.Name} (Grupo)", // Adiciona um sufixo para fácil identificação
//                 TelefoneWhatsApp = g.Phone, // O Group ID é usado no lugar do número de telefone
//                 IsGroup = true
//             }).ToList();
//             allSelectableUsers.AddRange(selectableGroups);
//         }
//         catch (Exception ex)
//         {
//             NotificationService.Notify(NotificationSeverity.Error, "Erro Z-API", $"Falha ao buscar grupos: {ex.Message}");
//         }

        // Combina as listas
        allSelectableUsers.AddRange(funcionarios);
        allSelectableUsers.AddRange(usuarios);

        // Opcional: Remover duplicatas se um usuário também for funcionário e tiver o mesmo ID
        allSelectableUsers = allSelectableUsers.GroupBy(u => u.TelefoneWhatsApp).Select(g => g.First()).ToList();

        // Ordena por nome
        allSelectableUsers = allSelectableUsers.OrderBy(u => u.Nome).ToList();
    }

    private bool ValidarObra()
    {
        Obra.Nome = Obra.Nome.Trim();

        if (string.IsNullOrWhiteSpace(Obra.Nome))
        {
            NotificationService.Notify(NotificationSeverity.Warning, "Atenção", "O campo 'Nome da Obra' é obrigatório.");
            return false;
        }
        if (Obra.ResponsavelObraId <= 0)
        {
            NotificationService.Notify(NotificationSeverity.Warning, "Atenção", "O campo 'Responsável Obra' é obrigatório.");
            return false;
        }
        if (Obra.ResponsavelMaterial == null)
        {
            NotificationService.Notify(NotificationSeverity.Warning, "Atenção", "O campo 'Responsável Materiais' é obrigatório.");
            return false;
        }
        if (Obra.Status == null)
        {
            NotificationService.Notify(NotificationSeverity.Warning, "Atenção", "O campo 'Status da Obra' é obrigatório.");
            return false;
        }
        return true;
    }

    private async Task ConfirmarRemocaoObra(long id)
    {
        if (await DialogHelper.ConfirmarAsync(DialogService, "Deseja realmente excluir esta obra?"))
        {
            await ExcluirConfirmado(id);
        }
    }

    private async Task ExcluirConfirmado(long id)
    {
        try
        {
            await ObraApiService.DeleteAsync(id);
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Sucesso", Detail = "Obra excluída com sucesso", Duration = 4000 });
            await OnRemover.InvokeAsync(Obra);

        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Erro", Detail = $"Erro ao excluir obra: {ex.Message}", Duration = 5000 });
        }
    }

    private async Task SalvarObraAsync()
    {
        if (!ValidarObra()) return;

        isSaving = true;

        try
        {
            if (Obra.Id == 0)
            {
                var obraCriada = await ObraApiService.CreateAsync(Obra);

                if (obraCriada != null)
                {
                    Obra.Id = obraCriada.Id;
                }
                NotificationService.Notify(NotificationSeverity.Success, "Sucesso", "Nova obra adicionada com sucesso!");
            }
            else
            {
                await ObraApiService.UpdateAsync(Obra);
                NotificationService.Notify(NotificationSeverity.Success, "Sucesso", "Alterações na obra salvas com sucesso!");
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Erro", $"Falha ao salvar a obra: {ex.Message}");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private async Task GerarRelatorioPdf()
    {
        try
        {
            var apiUrl = NavigationManager.BaseUri + $"api/Obra/{Obra.Id}/relatorio-pdf";
            await JSRuntime.InvokeVoidAsync("open", apiUrl, "_blank");
            NotificationService.Notify(NotificationSeverity.Success, "Sucesso", "Relatório PDF da Obra gerado com sucesso!");
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Erro", $"Erro ao gerar relatório PDF: {ex.Message}");
        }
    }

    private async Task OpenSendReportModal()
    {
        if (Obra.Id == 0)
        {
            NotificationService.Notify(NotificationSeverity.Warning, "Atenção", "Por favor, salve a obra antes de enviar o relatório.");
            return;
        }

        // Se não houver usuários ou funcionários com WhatsApp, notifique e saia
        if (!allSelectableUsers.Any())
        {
            NotificationService.Notify(NotificationSeverity.Warning, "Atenção", "Nenhum funcionário, usuário ou grupo com número de WhatsApp válido encontrado para envio.");
            return;
        }

        // Abre a modal, passando a lista combinada de usuários/funcionários/grupos
        var result = await DialogService.OpenAsync<SelectUsersModal>(
      "Enviar Relatório por WhatsApp",
      new Dictionary<string, object> { { "AvailableUsers", allSelectableUsers } },
      new DialogOptions() { Width = "600px", Height = "500px", CloseDialogOnOverlayClick = true }
    );

        // Se o usuário selecionou e clicou em enviar
        if (result is List<SelectableUserDto> selectedUsers && selectedUsers.Any())
        {
            await SendReportToSelectedUsers(selectedUsers);
        }
        else if (result == null)
        {
            NotificationService.Notify(NotificationSeverity.Info, "Cancelado", "Envio do relatório cancelado.");
        }
    }

    private async Task SendReportToSelectedUsers(List<SelectableUserDto> selectedUsers)
    {
        try
        {
            NotificationService.Notify(NotificationSeverity.Info, "Processando", "Gerando e enviando relatório(s) por WhatsApp. Isso pode levar alguns segundos...");

            // Gerar o PDF
            byte[] pdfBytes = await RelatorioObraService.GerarRelatorioObraPdfAsync(Obra.Id);

            if (pdfBytes == null || pdfBytes.Length == 0)
            {
                NotificationService.Notify(NotificationSeverity.Error, "Erro", "Não foi possível gerar o relatório PDF.");
                return;
            }

            var fileName = $"Relatorio_Obra_{Obra.Nome.Replace(" ", "_")}_{DateTime.Now:yyyyMMdd_HHmmss}.pdf";
            var caption = $"Relatório da Obra: {Obra.Nome}\nPeríodo: {(Obra.DataInicioExecucao != null ? Obra.DataInicioExecucao.Value.ToShortDateString() : string.Empty)}";

            int sentCount = 0;
            foreach (var user in selectedUsers)
            {
                try
                {
                    if (!string.IsNullOrEmpty(user.TelefoneWhatsApp))
                    {
                        // O serviço de notificação precisa saber se é um grupo ou telefone
                        // E usar o TelefoneWhatsApp (que contém o Group ID ou o número de telefone)
                        await ZApiNotificationService.SendWhatsAppDocumentAsync(
              user.TelefoneWhatsApp,
              pdfBytes,
              fileName,
              caption,
              user.IsGroup // Passa a informação se é um grupo
                        );
                        sentCount++;
                    }
                    else
                    {
                        Console.WriteLine($"AVISO: Usuário {user.Nome} (ID: {user.Id}) não possui número de WhatsApp válido para envio.");
                    }
                }
                catch (Exception userEx)
                {
                    NotificationService.Notify(NotificationSeverity.Error, "Erro de Envio", $"Falha ao enviar para {user.Nome}. Verifique o número de WhatsApp.");
                }
            }

            if (sentCount > 0)
            {
                NotificationService.Notify(NotificationSeverity.Success, "Sucesso", $"{sentCount} relatório(s) enviado(s) com sucesso por WhatsApp!");
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Warning, "Atenção", "Nenhum relatório foi enviado. Verifique se os usuários/grupos selecionados são válidos.");
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Erro", $"Falha geral ao enviar o relatório: {ex.Message}");
        }
    }
}