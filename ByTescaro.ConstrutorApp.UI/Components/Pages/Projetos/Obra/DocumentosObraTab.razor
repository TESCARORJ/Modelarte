@using ByTescaro.ConstrutorApp.Application.DTOs
@using ByTescaro.ConstrutorApp.UI.Services
@using ByTescaro.ConstrutorApp.Domain.Enums
@using ByTescaro.ConstrutorApp.Application.Utils
@using Microsoft.JSInterop

@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject ObraDocumentoApiService ObraDocumentoApiService
@inject ObraApiService ObraApiService

<RadzenCard Class="rz-p-4" @key="Obra?.Id">
    <RadzenHeading Size="H6" Text="Upload de Documentos" />

    <RadzenUpload Style="width: 100%"
                  Multiple="true"
                  Change=@ProcessarUpload
                  Accept=@accepts
                  ChooseText="Selecionar Documentos"
                  InputAttributes="@(new Dictionary<string,object>{{ "aria-label", "select file" }})" />

    <RadzenDivider Style="margin: 1rem 0" />

    @if (Obra.Documentos?.Any() == true)
    {
        <RadzenDataList Data="@Obra.Documentos" TItem="ObraDocumentoDto">
            <Template Context="doc">
                <RadzenPanel>
                    <HeaderTemplate>
                        <b>@doc.NomeOriginal (@doc.Extensao.ToUpper()) - @doc.TamanhoEmKb KB</b>
                    </HeaderTemplate>
                    <ChildContent>
                        <div class="acoes-doc">
                            <!-- DOWNLOAD estilizado como botão Radzen (tamanho small) -->
                            <a class="rz-button rz-button-sm rz-variant-filled rz-mr-2"
                               href="@GetFileUrl(doc)"
                               download="@GetDownloadFileName(doc)">
                                <span class="rz-button-text">Download</span>
                            </a>

                            <RadzenButton Icon="delete"
                                          Text="Excluir"
                                          ButtonStyle="ButtonStyle.Danger"
                                          Size="ButtonSize.Small"
                                          Click="@(() => ConfirmarRemocao(doc))" />
                        </div>
                    </ChildContent>
                </RadzenPanel>
            </Template>
        </RadzenDataList>
    }
    else
    {
        <RadzenText Text="Nenhum documento enviado." />
    }
</RadzenCard>

<style>
    /* Garante alinhamento vertical e espaçamento fixo entre os botões */
    .acoes-doc {
        display: inline-flex;
        align-items: center;
        gap: .5rem;
    }
</style>

@code {
    [Parameter] public ObraDto Obra { get; set; } = new();

    private string accepts => string.Join(", ",
        Enum.GetValues<ExtensaoDocumentoPermitida>()
            .Select(e => $".{e.ToString().ToLower()}"));

    protected override async Task OnParametersSetAsync()
    {
        if (Obra != null && Obra.Id > 0)
        {
            Obra.Documentos = await ObraDocumentoApiService.GetByObraIdAsync(Obra.Id) ?? new();
            StateHasChanged();
        }
        else
        {
            Obra.Documentos = new();
        }
    }

    private async void ProcessarUpload(UploadChangeEventArgs args)
    {
        if (Obra.Documentos == null)
            Obra.Documentos = new List<ObraDocumentoDto>();

        foreach (var file in args.Files)
        {
            var extensao = System.IO.Path.GetExtension(file.Name).ToLower().TrimStart('.');

            if (!Enum.TryParse<ExtensaoDocumentoPermitida>(extensao.ToUpper(), out _))
            {
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Erro", Detail = $"Extensão '{extensao}' não permitida." });
                continue;
            }

            try
            {
                var nomeOriginal = System.IO.Path.GetFileName(file.Name);
                var pastaDestino = System.IO.Path.Combine("wwwroot", "Uploads", "Projetos", Obra.ProjetoId.ToString(), Obra.Id.ToString(), "Documentos");
                System.IO.Directory.CreateDirectory(pastaDestino);

                var caminhoFinal = System.IO.Path.Combine(pastaDestino, nomeOriginal);

                // Comprimir (se preciso) e salvar o arquivo físico
                await using var streamComprimido = await DocumentoCompressorService.ComprimirSeNecessarioAsync(file);
                await using var fs = System.IO.File.Create(caminhoFinal);
                await streamComprimido.CopyToAsync(fs);

                var tamanhoKb = Math.Max(1, (long)System.Math.Ceiling(streamComprimido.Length / 1024.0));

                var documentoDto = new ObraDocumentoDto
                {
                    ObraId = Obra.Id,
                    NomeOriginal = nomeOriginal,
                    CaminhoRelativo = System.IO.Path.Combine("Uploads", "Projetos", Obra.ProjetoId.ToString(), Obra.Id.ToString(), "Documentos", nomeOriginal).Replace("\\", "/"),
                    Extensao = extensao,
                    TamanhoEmKb = tamanhoKb,
                    DataHoraCadastro = DateTime.Now
                };

                await ObraDocumentoApiService.CreateAsync(documentoDto);
                Obra.Documentos.Add(documentoDto);

                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Sucesso", Detail = $"Documento '{nomeOriginal}' salvo com sucesso." });
            }
            catch (Exception ex)
            {
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Erro", Detail = $"Erro ao salvar '{file.Name}': {ex.Message}" });
            }
        }

        StateHasChanged();
    }

    private string GetFileUrl(ObraDocumentoDto doc)
    {
        if (doc == null || string.IsNullOrWhiteSpace(doc.CaminhoRelativo))
            return "#";

        // Normaliza separadores e remove a barra inicial
        var path = doc.CaminhoRelativo.Replace("\\", "/").TrimStart('/');

        // Escapa apenas o nome do arquivo (para espaços/acentos)
        var lastSlash = path.LastIndexOf('/');
        if (lastSlash >= 0 && lastSlash < path.Length - 1)
        {
            var dir = path[..(lastSlash + 1)];
            var file = path[(lastSlash + 1)..];
            path = dir + Uri.EscapeDataString(file);
        }

        // URL absoluta respeitando BaseUri/PathBase
        return NavigationManager.ToAbsoluteUri(path).ToString();
    }

    private static string GetDownloadFileName(ObraDocumentoDto doc)
        => string.IsNullOrWhiteSpace(doc?.NomeOriginal) ? "arquivo" : doc.NomeOriginal;

    private async Task ConfirmarRemocao(ObraDocumentoDto doc)
    {
        bool? confirm = await DialogService.Confirm(
            $"Deseja realmente remover o documento '{doc.NomeOriginal}'?",
            "Remover Documento");

        if (confirm == true)
        {
            try
            {
                await ObraDocumentoApiService.DeleteAsync(doc.Id);
                Obra.Documentos.Remove(doc);
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "Removido", Detail = $"Documento '{doc.NomeOriginal}' removido." });
            }
            catch (Exception ex)
            {
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Erro", Detail = $"Erro ao remover o documento: {ex.Message}" });
            }
        }
        StateHasChanged();
    }
}
