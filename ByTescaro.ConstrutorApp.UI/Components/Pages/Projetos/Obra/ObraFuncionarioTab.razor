@using ByTescaro.ConstrutorApp.Application.DTOs
@using ByTescaro.ConstrutorApp.UI.Services
@inject ObraFuncionarioApiService ObraFuncionarioApiService
@inject ObraApiService ObraApiService
@inject NotificationService NotificationService
@inject DialogService DialogService

<RadzenCard Class="pa-4">
    <RadzenHeading Size="H6" Text="Funcionários Alocados na Obra" class="mb-3" />

    <RadzenDropDown TValue="List<long>"
    Data="@FuncionariosDisponiveis"
    TextProperty="Nome"
    ValueProperty="Id"
    Placeholder="Selecionar Funcionários"
    Multiple="true"
    SelectAllText="Selecionar Todos"
    Style="width: 100%;"
                    Class="rz-mb-2"
    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true" @bind-Value="_funcionariosSelecionados" />

@*     <RadzenButton Text="Adicionar Selecionados"
    Style="margin-top: 1rem; margin-bottom: 1rem;"
    Disabled="@(!_funcionariosSelecionados.Any())"
    Click="AdicionarFuncionarios" /> *@

    <RadzenRow Style="margin-bottom: 1rem; gap: 0.5rem">
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenButton Text="Adicionar Selecionados" Icon="add_circle_outline" Style="width: 100%;"
                          Disabled="@(!_funcionariosSelecionados.Any())"
                          Click="@AdicionarFuncionarios" />
        </RadzenColumn>

        <RadzenColumn Size="12" SizeMD="6">
            <RadzenButton Text="Salvar Funcionários" Icon="save" ButtonStyle="ButtonStyle.Primary"
                          Style="width: 100%;"
                          Click="SalvarFuncionariosAsync" Disabled="@IsBotaoSalvarDesabilitado" />
        </RadzenColumn>
    </RadzenRow>

    <RadzenDivider Style="margin: 1rem 0;" />

    @if (Obra.Funcionarios?.Any() == true)
    {
        <RadzenDataGrid Data="@Obra.Funcionarios" TItem="ObraFuncionarioDto" ShowPagingSummary="false" PageSize="10" Responsive="true">
            <Columns>
                <RadzenDataGridColumn TItem="ObraFuncionarioDto" Property="FuncionarioNome" Title="Nome" />
                <RadzenDataGridColumn TItem="ObraFuncionarioDto" Property="FuncaoNoObra" Title="Função" />
                <RadzenDataGridColumn TItem="ObraFuncionarioDto" Property="DataInicio" Title="Início" FormatString="{0:dd/MM/yyyy}" />
                <RadzenDataGridColumn TItem="ObraFuncionarioDto" Property="DataFim" Title="Fim" FormatString="{0:dd/MM/yyyy}" />
@*                 <RadzenDataGridColumn TItem="ObraFuncionarioDto" Property="DataHoraCadastro" Title="Data Cadastro" FormatString="{0:dd/MM/yyyy}" />
                <RadzenDataGridColumn TItem="ObraFuncionarioDto" Property="UsuarioCadastro" Title="Cadastrador por" /> *@
                <RadzenDataGridColumn TItem="ObraFuncionarioDto">
                    <Template Context="funcionario">
                        <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Small" Click="@(() => ConfirmarRemocao(funcionario))" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    }
    else
    {
        <RadzenText Text="Nenhum funcionário adicionado à obra." />
    }
@*     <RadzenButton Text="Salvar Funcionários"
    Icon="save"
    ButtonStyle="ButtonStyle.Primary"
    Style="margin-top: 1rem;"
    Click="SalvarFuncionariosAsync"
    Disabled="@IsBotaoSalvarDesabilitado" />
 *@

</RadzenCard>

@code {
    [Parameter] public ObraDto Obra { get; set; } = new();
    [Parameter] public List<FuncionarioDto> FuncionariosDisponiveis { get; set; } = new();
    private bool IsBotaoSalvarDesabilitado => Obra.Funcionarios == null || !Obra.Funcionarios.Any();
    private List<ObraFuncionarioDto> _funcionariosOriginais = new();
    private List<long> _funcionariosSelecionados = new();
    private bool isLoading = true;



    private void AdicionarFuncionarios()
    {
        if (Obra.Funcionarios == null)
            Obra.Funcionarios = new List<ObraFuncionarioDto>();

        var novos = new List<ObraFuncionarioDto>();

        foreach (var id in _funcionariosSelecionados)
        {
            if (Obra.Funcionarios.Any(f => f.FuncionarioId == id))
                continue;

            var funcionario = FuncionariosDisponiveis.FirstOrDefault(f => f.Id == id);
            if (funcionario is not null)
            {
                novos.Add(new ObraFuncionarioDto
                    {
                        ObraId = Obra.Id,
                        FuncionarioId = funcionario.Id,
                        FuncionarioNome = funcionario.Nome,
                        FuncaoNoObra = funcionario.FuncaoNome ?? string.Empty,
                        DataInicio = DateTime.Today
                    });
            }
        }

        if (novos.Any())
        {
            // 🔁 recria a lista
            Obra.Funcionarios = Obra.Funcionarios.Concat(novos).ToList();
        }

        _funcionariosSelecionados.Clear();
    }


    private async Task ConfirmarRemocao(ObraFuncionarioDto funcionario)
    {

        var insumosFunc = Obra.ListasInsumo.Where(x => x.ResponsavelId == funcionario.FuncionarioId).ToList();
        var servicosFunc = Obra.ListasServico.Where(x => x.ResponsavelId == funcionario.FuncionarioId).ToList();
        if(Obra.ResponsavelObraId == funcionario.FuncionarioId)
        {
            NotificationService.Notify(NotificationSeverity.Warning, "Atenção", $"O funcionário '{funcionario.FuncionarioNome}' não pode ser removido pois é Responsável pela Obra.");
            return;
        }

        if (insumosFunc.Any())
        {
            NotificationService.Notify(NotificationSeverity.Warning, "Atenção", $"O funcionário '{funcionario.FuncionarioNome}' não pode ser removido pois possui insumos em sua responsabilidade.");
            return;
        }

        if (servicosFunc.Any())
        {
            NotificationService.Notify(NotificationSeverity.Warning, "Atenção", $"O funcionário '{funcionario.FuncionarioNome}' não pode ser removido pois possui servicos em sua responsabilidade.");
            return;
        }


        bool? confirm = await DialogService.Confirm($"Deseja realmente remover o funcionário '{funcionario.FuncionarioNome}'?", "Remover Funcionário");

        if (confirm == true)
        {
            Obra.Funcionarios = Obra.Funcionarios
                        .Where(f => f.FuncionarioId != funcionario.FuncionarioId)
                        .ToList();

            NotificationService.Notify(NotificationSeverity.Warning, "Removido", "Funcionário removido da lista.");

            StateHasChanged();

        }
    }

    /// OnParametersSetAsync é usado para carregar os dados do checklist
    /// sempre que os parâmetros do componente (como 'Obra') forem definidos.
    /// </summary>
    protected override async Task OnParametersSetAsync()
    {
        // Garante que o Obra.Id seja válido antes de buscar os dados
        if (Obra != null && Obra.Id > 0)
        {
            isLoading = true;

            // Chama o serviço para carregar o checklist associado a esta obra
            Obra = await ObraApiService.GetByIdAsync(Obra.Id);

            isLoading = false;
        }
    }



    protected override async Task OnInitializedAsync()
    {
        if (!FuncionariosDisponiveis.Any())
        {
            FuncionariosDisponiveis = await ObraFuncionarioApiService.GetFuncionariosTotalDisponiveisAsync();
        }

        // Clona os funcionários atuais para controle de remoções
        // _funcionariosOriginais = Obra.Funcionarios?.Select(f => new ObraFuncionarioDto
        //     {
        //         Id = f.Id,
        //         FuncionarioId = f.FuncionarioId,
        //         ObraId = f.ObraId
        //     }).ToList() ?? new();

        _funcionariosOriginais = await ObraFuncionarioApiService.GetByObraIdAsync(Obra.Id);

    }


    private async Task SalvarFuncionariosAsync()
    {

        var validationErrors = await ValidateForm(Obra);


        if (validationErrors.Any())
        {
            foreach (var error in validationErrors)
            {
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Erro de Validação", Detail = error, Duration = 5000 });
            }
            return;
        }



       
        try
        {
            // 🔁 Atualizar e adicionar
            foreach (var funcionario in Obra.Funcionarios)
            {
                funcionario.ObraId = Obra.Id;               

                if (funcionario.Id == 0)
                    await ObraFuncionarioApiService.CreateAsync(funcionario);
                else
                    await ObraFuncionarioApiService.UpdateAsync(funcionario);
            }

            // ❌ Remover os que saíram
            var idsAtuais = Obra.Funcionarios.Select(f => f.Id).ToHashSet();
            var removidos = _funcionariosOriginais.Where(f => !idsAtuais.Contains(f.Id)).ToList();

            foreach (var func in removidos)
            {
                if (func.Id > 0)
                    await ObraFuncionarioApiService.DeleteAsync(func.Id);
            }

            // ✅ Atualiza o controle de estado original
            _funcionariosOriginais = Obra.Funcionarios
                .Select(f => new ObraFuncionarioDto
                    {
                        Id = f.Id,
                        FuncionarioId = f.FuncionarioId,
                        ObraId = f.ObraId
                    }).ToList();

            NotificationService.Notify(NotificationSeverity.Success, "Sucesso", "Funcionários salvos com sucesso.");
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Erro", $"Erro ao salvar funcionários: {ex.Message}");
        }
    }

    private async Task<List<string>> ValidateForm(ObraDto model)
    {
        var errors = new List<string>();


        if (string.IsNullOrEmpty(model.Nome))
        {
            errors.Add("Campo Noome da Obra é obrigatório.");
        }


        if (model.ResponsavelMaterial == null)
        {
            errors.Add("Selecione o Responsável Materiais.");
        }


        if (model.ResponsavelObraId == null)
        {
            errors.Add("Selecione o Responsável Obra.");
        }


        if (!Obra.Funcionarios.Any())
        {
            errors.Add("Adicione ao menos um funcionário.");
        }

        var erros = new List<string>();

        foreach (var func in Obra.Funcionarios)
        {
            if (func.DataInicio == default)
                erros.Add($"Funcionário '{func.FuncionarioNome}' está sem data de início.");

            if (func.DataFim.HasValue && func.DataFim < func.DataInicio)
                erros.Add($"Funcionário '{func.FuncionarioNome}' possui data de fim anterior à de início.");
        }        


        return errors;
    }



}