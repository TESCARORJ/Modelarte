@page "/projetos/detalhes/{Id:long}"

@using ByTescaro.ConstrutorApp.Application.DTOs
@using ByTescaro.ConstrutorApp.Domain.Enums
@using ByTescaro.ConstrutorApp.Application.Utils @* Para EnumHelper, se aplicável *@
@using ByTescaro.ConstrutorApp.UI.Services
@inject ProjetoApiService ProjetoApiService
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

<PageTitle>Detalhes do Projeto</PageTitle>

<RadzenCard Class="rz-mt-4 rz-p-4 rz-shadow-md rz-rounded-md rz-mx-auto" Style="max-width: 1300px; width: 100%;">
    <RadzenHeading Size="H4" Text="Detalhes do Projeto" Class="rz-mb-3" />

    @if (projeto is null)
    {
        <RadzenText Text="Carregando detalhes do projeto ou projeto não encontrado..." Style="color: gray; padding: 1rem;" />
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-top: 10px;" />
    }
    else
    {
        <RadzenTabs>
            <Tabs>
                <RadzenTabsItem Text="Informações Gerais">
                    <RadzenFieldset Text="Dados Principais do Projeto" Style="margin-bottom: 1.5rem;">
                        @* Removido RadzenTemplateForm e RadzenGrid internos, usando RadzenRow/Column diretamente com RadzenText *@
                        <RadzenRow>
                            <RadzenColumn Size="12" SizeMD="6">
                                <RadzenText TextStyle="TextStyle.Body1">
                                    <strong>Nome do Projeto:</strong> <span>@projeto.Nome</span>
                                </RadzenText>
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="6">
                                <RadzenText TextStyle="TextStyle.Body1">
                                    <strong>Status:</strong> <span>@(EnumHelper.ObterDescricaoEnum(projeto.Status))</span>
                                </RadzenText>
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="6">
                                <RadzenText TextStyle="TextStyle.Body1">
                                    <strong>Data Início:</strong> <span>@projeto.DataInicio?.ToString("dd/MM/yyyy")</span>
                                </RadzenText>
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="6">
                                <RadzenText TextStyle="TextStyle.Body1">
                                    <strong>Data Fim Prevista:</strong> <span>@projeto.DataFim?.ToString("dd/MM/yyyy")</span>
                                </RadzenText>
                            </RadzenColumn>
                            @* Adicione aqui outros campos de auditoria ou outros dados importantes do projeto *@
                            <RadzenColumn Size="12" SizeMD="6">
                                <RadzenText TextStyle="TextStyle.Body1">
                                    <strong>Usuário Cadastro:</strong> <span>@projeto.UsuarioCadastroNome</span> @* Assumindo que você tem essa propriedade *@
                                </RadzenText>
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="6">
                                <RadzenText TextStyle="TextStyle.Body1">
                                    <strong>Data/Hora Cadastro:</strong> <span>@projeto.DataHoraCadastro.ToString("dd/MM/yyyy HH:mm:ss")</span>
                                </RadzenText>
                            </RadzenColumn>
                           @*   @if (projeto.DataHoraAtualizacao.HasValue)
                            {
                                <RadzenColumn Size="12" SizeMD="6">
                                    <RadzenText TextStyle="TextStyle.Body1">
                                        <strong>Última Atualização Por:</strong> <span>@projeto.UsuarioAtualizacaoNome</span>
                                    </RadzenText>
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="6">
                                    <RadzenText TextStyle="TextStyle.Body1">
                                        <strong>Data/Hora Última Atualização:</strong> <span>@projeto.DataHoraAtualizacao?.ToString("dd/MM/yyyy HH:mm:ss")</span>
                                    </RadzenText>
                                </RadzenColumn>
                            } *@
                        </RadzenRow>
                    </RadzenFieldset>

                    @if (!string.IsNullOrWhiteSpace(projeto.CEP))
                    {
                        <RadzenFieldset Text="Endereço" Style="margin-bottom: 1.5rem;">
                            <RadzenRow>
                                <RadzenColumn Size="12" SizeMD="3">
                                    <RadzenText TextStyle="TextStyle.Body1">
                                        <strong>CEP:</strong> <span>@projeto.CEP</span>
                                    </RadzenText>
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="6">
                                    <RadzenText TextStyle="TextStyle.Body1">
                                        <strong>Logradouro:</strong> <span>@projeto.Logradouro</span>
                                    </RadzenText>
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="3">
                                    <RadzenText TextStyle="TextStyle.Body1">
                                        <strong>Número:</strong> <span>@projeto.Numero</span>
                                    </RadzenText>
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenText TextStyle="TextStyle.Body1">
                                        <strong>Complemento:</strong> <span>@projeto.Complemento</span>
                                    </RadzenText>
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenText TextStyle="TextStyle.Body1">
                                        <strong>Bairro:</strong> <span>@projeto.Bairro</span>
                                    </RadzenText>
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenText TextStyle="TextStyle.Body1">
                                        <strong>Cidade:</strong> <span>@projeto.Cidade</span>
                                    </RadzenText>
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="6">
                                    <RadzenText TextStyle="TextStyle.Body1">
                                        <strong>Estado:</strong> <span>@projeto.Estado</span>
                                    </RadzenText>
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="2">
                                    <RadzenText TextStyle="TextStyle.Body1">
                                        <strong>UF:</strong> <span>@projeto.UF</span>
                                    </RadzenText>
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenFieldset>
                    }

                    <RadzenFieldset Text="Observações" Style="margin-bottom: 1.5rem;">
                        <RadzenText TextStyle="TextStyle.Body1" Style="white-space: pre-wrap;"> @* pre-wrap para quebras de linha *@
                            <strong>Observação Geral:</strong><br />
                            <span>@projeto.Observacao</span>
                        </RadzenText>

                        @if (projeto.Status == StatusProjeto.Concluido)
                        {
                            <RadzenText TextStyle="TextStyle.Body1" Class="rz-mt-3" Style="white-space: pre-wrap;">
                                <strong>Descrição da Conclusão:</strong><br />
                                <span>@projeto.DescricaoConclusao</span>
                            </RadzenText>
                        }
                        @if (projeto.Status == StatusProjeto.Cancelado)
                        {
                            <RadzenText TextStyle="TextStyle.Body1" Class="rz-mt-3" Style="white-space: pre-wrap;">
                                <strong>Descrição do Cancelamento:</strong><br />
                                <span>@projeto.DescricaoCancelamento</span>
                            </RadzenText>
                        }
                    </RadzenFieldset>
                </RadzenTabsItem>

                <RadzenTabsItem Text="Checklist da Obra">
                    @if (projeto.Obras is null || !projeto.Obras.Any())
                    {
                        <RadzenAlert Severity="AlertSeverity.Info" Summary="Sem etapas cadastradas." />
                    }
                    else
                    {
                        @foreach (var obra in projeto.Obras.OrderBy(o => o.Nome)) @* Ordene as obras por nome, se desejar *@
                        {
                            <RadzenCard Class="rz-mb-4 rz-shadow-sm">
                                <RadzenHeading Size="H6" Text="@($"Obra: {obra.Nome}")" Class="rz-mb-2" />
                                @* <RadzenText TextStyle="TextStyle.Caption">Data Início Obra: @obra.DataInicioExecucao?.ToString("dd/MM/yyyy") | Data Fim Obra: @obra.?.ToString("dd/MM/yyyy")</RadzenText> *@
                                @* <RadzenDivider /> *@

                                @foreach (var etapa in obra.Etapas.OrderBy(e => e.Ordem))
                                {
                                    <RadzenCard Class="rz-mb-3 rz-shadow-xs">
                                        <RadzenHeading Size="H6" Text="@($"Etapa {etapa.Ordem}: {etapa.Nome}")" Class="rz-mb-2" />
                                        @* <RadzenText TextStyle="TextStyle.Caption">Data Início Etapa: @etapa.DataInicio?.ToString("dd/MM/yyyy") | Data Fim Etapa: @etapa.DataFim?.ToString("dd/MM/yyyy")</RadzenText> *@
                                        <RadzenDivider />

                                        <RadzenGrid Data="@etapa.Itens.OrderBy(i => i.Ordem)" TItem="ObraItemEtapaDto" AllowSorting="true">
                                            <Columns>
                                                <RadzenDataGridColumn TItem="ObraItemEtapaDto" Property="Nome" Title="Item" Width="60%">
                                                    <Template Context="item">
                                                        <RadzenText Text="@item.Nome" />
                                                    </Template>
                                                </RadzenDataGridColumn>
                                                <RadzenDataGridColumn TItem="ObraItemEtapaDto" Title="Status" Width="20%" TextAlign="TextAlign.Center">
                                                    <Template Context="item">
                                                        @{
                                                            var (cor, texto) = ObterStatusPrazoItem(item);
                                                        }
                                                        <RadzenBadge Text="@texto" Style="@($"background-color: {cor.ToLower()};")" />
                                                    </Template>
                                                </RadzenDataGridColumn>
                                                <RadzenDataGridColumn TItem="ObraItemEtapaDto" Property="DataPrazoCalculada" Title="Prazo" Width="20%" FormatString="{0:dd/MM/yyyy}" TextAlign="TextAlign.Center">
                                                    <Template Context="item">
                                                        <RadzenText Text="@(item.IsDataPrazo ? (item.DataPrazoCalculada?.ToString("dd/MM/yyyy") ?? "-") : "Não Aplicável")" />
                                                    </Template>
                                                </RadzenDataGridColumn>
                                            </Columns>
                                        </RadzenGrid>
                                    </RadzenCard>
                                }
                            </RadzenCard>
                        }
                    }
                </RadzenTabsItem>
            </Tabs>
        </RadzenTabs>

        <div class="rz-mt-4 rz-d-flex rz-justify-content-end rz-gap-3">
            <RadzenButton Text="Voltar"
                          Click="@(() => Navigation.NavigateTo("/projetos"))"
                          ButtonStyle="ButtonStyle.Light" />
            <RadzenButton Text="Editar"
                          Click="@(() => Navigation.NavigateTo($"/projetos/editar/{projeto.Id}"))"
                          Icon="edit"
                          ButtonStyle="ButtonStyle.Primary" />
        </div>
    }
</RadzenCard>

@code {
    [Parameter] public long Id { get; set; }
    private ProjetoDto? projeto;

    protected override async Task OnInitializedAsync()
    {
        // Garanta que você está buscando as obras e suas etapas/itens para exibi-los
        projeto = await ProjetoApiService.GetByIdAsync(Id); // Verifique se este método já inclui Obras, Etapas, Itens
                                                            // Se não, você precisará de um método FindOneWithIncludesAsync para o Projeto.
                                                            // Ex: projeto = await ProjetoApiService.FindOneWithIncludesAsync(Id, p => p.Obras, p => p.Obras.Select(o => o.Etapas), ...);
        if (projeto?.Obras != null)
        {
            foreach (var obra in projeto.Obras)
            {
                if (obra.Etapas != null)
                {
                    foreach (var etapa in obra.Etapas)
                    {
                        // Garante que a lista de itens da etapa não é nula
                        etapa.Itens ??= new List<ObraItemEtapaDto>();

                        // Recalcula DataPrazoCalculada para cada item se necessário,
                        // pois pode não vir preenchida da API ou do mapeamento.
                        // Isso é importante para a lógica de ObterStatusPrazoItem.
                        foreach (var item in etapa.Itens)
                        {
                            if (item.IsDataPrazo && item.DiasPrazo.HasValue)
                            {
                                var dataBase =
                                    projeto.DataInicioExecucao?.ToDateTime(TimeOnly.MinValue) ??
                                    projeto.DataInicio?.ToDateTime(TimeOnly.MinValue) ??
                                    DateTime.Now; // Fallback para data atual se datas do projeto forem nulas

                                item.DataPrazoCalculada = dataBase.AddDays(item.DiasPrazo.Value);
                            }
                            else
                            {
                                item.DataPrazoCalculada = null; // Garante que é nulo se não houver prazo
                            }
                        }
                    }
                }
            }
        }
    }

    private (string Cor, string Texto) ObterStatusPrazoItem(ObraItemEtapaDto item)
    {
        if (!item.IsDataPrazo)
            return ("gray", "Sem prazo"); // Retorna cor e texto diretamente

        // Use DataPrazoCalculada que já foi pré-calculada no OnInitializedAsync
        var dataPrazo = item.DataPrazoCalculada;

        if (dataPrazo == null)
            return ("gray", "Sem prazo");

        var diasRestantes = (dataPrazo.Value.Date - DateTime.Today).Days; // Usar DateTime.Today para comparação com data atual

        return item.Concluido ? ("green", "Concluído") :
               diasRestantes > 1 ? ("green", $"Faltam {diasRestantes} dias") :
               diasRestantes == 1 ? ("orange", "Vence amanhã") :
               diasRestantes == 0 ? ("red", "Vence hoje") :
               ("red", $"Atrasado há {Math.Abs(diasRestantes)} dias"); // Use Math.Abs para valor absoluto de dias atrasados
    }
}