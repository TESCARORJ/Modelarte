@page "/equipamentos/novo"
@page "/equipamentos/editar/{Id:long}"

@using ByTescaro.ConstrutorApp.Application.DTOs
@using ByTescaro.ConstrutorApp.Domain.Enums
@using ByTescaro.ConstrutorApp.UI.Services
@using Microsoft.AspNetCore.Authorization
@inject EquipamentoApiService EquipamentoApiService
@inject NavigationManager Navigation
@inject NotificationService NotificationService
@attribute [Authorize]

<PageTitle>Equipamento</PageTitle>

<RadzenCard Class="rz-mt-5 rz-p-4 rz-shadow-md rz-rounded-md rz-mx-auto" Style="max-width: 1300px; width: 100%;">
    <RadzenTemplateForm TItem="EquipamentoDto" Data="@equipamento" Submit="Salvar" InvalidSubmit="ExibirErros">
        <RadzenHeading Size="H4" Text="@(Id == 0 ? "Novo Equipamento" : "Editar Equipamento")" Class="rz-mb-3" />

        <RadzenFieldset Text="Dados do Equipamento" Style="margin-bottom: 1.5rem;">
            <RadzenRow>
                <RadzenColumn Size="12" SizeMD="6">
                    <RadzenLabel Text="Nome" />
                    <RadzenTextBox @bind-Value="equipamento.Nome" Name="Nome" Placeholder="Nome" Style="width: 100%;" />
                    <RadzenRequiredValidator Component="Nome" Text="O nome é obrigatório." />
                </RadzenColumn>

                <RadzenColumn Size="12" SizeMD="6">
                    <RadzenLabel Text="Patrimônio" />
                    <RadzenTextBox @bind-Value="equipamento.Patrimonio" Name="Patrimonio" Placeholder="Patrimônio" Style="width: 100%;" />
                    <RadzenRequiredValidator Component="Patrimonio" Text="O patrimônio é obrigatório." />
                </RadzenColumn>

                <RadzenColumn Size="12">
                    <RadzenLabel Text="Descrição" />
                    <RadzenTextBox @bind-Value="equipamento.Descricao" Name="Descricao" Placeholder="Descrição" Style="width: 100%;" />
                </RadzenColumn>

                <RadzenColumn Size="12" SizeMD="6">
                    <RadzenLabel Text="Custo de Locação Diária (R$)" />
                    <RadzenNumeric @bind-Value="equipamento.CustoLocacaoDiaria"
                                   Name="CustoLocacaoDiaria"
                                   Placeholder="0,00"
                                   Min="0.01m"
                                   Step="0.01m"
                                   Format="n2"
                                   ShowUpDown="false"
                                   Style="width: 100%;" />
                    <RadzenRequiredValidator Component="CustoLocacaoDiaria" Text="O custo de locação diária é obrigatório." />
                </RadzenColumn>
            </RadzenRow>
        </RadzenFieldset>

        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="1rem" Class="rz-mt-3">
            <RadzenButton Text="Cancelar" ButtonStyle="ButtonStyle.Light" Click="@Cancelar" />
            <RadzenButton Text="Salvar" ButtonType="ButtonType.Submit" Icon="save" Style="min-width: 120px;" />
        </RadzenStack>
    </RadzenTemplateForm>
</RadzenCard>

@code {
    [Parameter] public long Id { get; set; }

    private EquipamentoDto equipamento = new();
    private EquipamentoDto _originalEquipamentoDto = new();

    protected override async Task OnInitializedAsync()
    {
        if (Id != 0)
        {
            var existente = await EquipamentoApiService.GetByIdAsync(Id);
            if (existente is not null)
            {
                equipamento = existente;
                _originalEquipamentoDto = existente.Clone();
            }
        }
    }

    private async Task<List<string>> ValidateEquipamentoForm(EquipamentoDto model)
    {
        var errors = new List<string>();

        // 1. Validação de Duplicidade do Nome
        if (!string.IsNullOrWhiteSpace(model.Nome))
        {
            string originalNome = _originalEquipamentoDto?.Nome ?? string.Empty;
            bool nomeChanged = (model.Id == 0) || (model.Nome != originalNome);

            if (nomeChanged)
            {
                long? ignoreId = model.Id != 0 ? model.Id : (long?)null;
                bool nomeAlreadyExists = await EquipamentoApiService.NomeExistsAsync(model.Nome, ignoreId);
                if (nomeAlreadyExists)
                {
                    errors.Add("Já existe um equipamento com este nome.");
                }
            }
        }

        // 2. Validação de Duplicidade do Patrimônio
        if (!string.IsNullOrWhiteSpace(model.Patrimonio))
        {
            string originalPatrimonio = _originalEquipamentoDto?.Patrimonio ?? string.Empty;
            bool patrimonioChanged = (model.Id == 0) || (model.Patrimonio != originalPatrimonio);

            if (patrimonioChanged)
            {
                long? ignoreId = model.Id != 0 ? model.Id : (long?)null;
                bool patrimonioAlreadyExists = await EquipamentoApiService.PatrimonioExistsAsync(model.Patrimonio, ignoreId);
                if (patrimonioAlreadyExists)
                {
                    errors.Add("Já existe um equipamento com este número de patrimônio.");
                }
            }
        }

        return errors;
    }

    private async Task Salvar(EquipamentoDto model)
    {
        // Limpar strings (trim) se necessário, antes da validação
        model.Nome = model.Nome?.Trim() ?? string.Empty;
        model.Patrimonio = model.Patrimonio?.Trim() ?? string.Empty;
        model.Descricao = model.Descricao?.Trim() ?? string.Empty;


        // 1. Executa todas as validações customizadas
        var validationErrors = await ValidateEquipamentoForm(model);

        if (validationErrors.Any())
        {
            foreach (var error in validationErrors)
            {
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Erro de Validação", Detail = error, Duration = 5000 });
            }
            return; // Impede a submissão se houver erros de validação
        }

        // Se todas as validações manuais passaram, tente salvar.
        try
        {
            if (model.Id == 0)
            {
                await EquipamentoApiService.CreateAsync(model);
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Sucesso",
                        Detail = "Equipamento cadastrado com sucesso!",
                        Duration = 4000
                    });
            }
            else
            {
                await EquipamentoApiService.UpdateAsync(model);
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Sucesso",
                        Detail = "Equipamento atualizado com sucesso!",
                        Duration = 4000
                    });
            }

            Navigation.NavigateTo("/equipamentos");
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Erro",
                    Detail = $"Erro ao salvar equipamento: {ex.Message}",
                    Duration = 5000
                });
        }
    }

    private void ExibirErros()
    {
        NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Warning,
                Summary = "Atenção",
                Detail = "Existem erros de validação no formulário.",
                Duration = 4000
            });
    }

    private void Cancelar()
    {
        Navigation.NavigateTo("/equipamentos");
    }
}
