@using ByTescaro.ConstrutorApp.Application.DTOs
@using ByTescaro.ConstrutorApp.UI.Services
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject ObraImagemApiService ObraImagemApiService
@inject ObraApiService ObraApiService

<RadzenCard Variant="Variant.Outlined" Class="rz-pa-4" @key="Obra?.Id">
    <RadzenHeading Size="H6" Text="Galeria de Fotos da Obra" />

    <RadzenUpload Accept=".jpg,.jpeg,.png,.bmp"
                  Multiple="true"
                  Change="@OnUpload"
                  ChooseText="Selecionar Imagens"
                  InputAttributes="@(new Dictionary<string, object> { { "aria-label", "selecionar imagens" } })" />

    <RadzenDivider Class="rz-my-3" />

    @if (Obra.Imagens?.Any() == true)
    {
        <RadzenRow>
            @foreach (var img in Obra.Imagens)
            {
                <RadzenColumn Size="6" SizeSM="4" SizeMD="3" SizeLG="2">
                    <div class="thumb">
                        <RadzenButton Icon="delete"
                                      Size="ButtonSize.Small"
                                      ButtonStyle="ButtonStyle.Danger"
                                      Class="thumb-delete"
                                      Click="@(() => ConfirmarRemocao(img))" />

                        <div class="thumb-img-box" @onclick="() => AbrirGaleria(img)">
                            <img class="thumb-img"
                                 src="@GetImageUrl(img)"
                                 alt="@img.NomeOriginal"
                                 loading="lazy" />
                        </div>

                        <div class="rz-mt-1 rz-text-caption rz-text-truncate" title="@img.NomeOriginal">
                            @img.NomeOriginal
                        </div>
                    </div>
                </RadzenColumn>
            }
        </RadzenRow>
    }
    else
    {
        <RadzenText Text="Nenhuma imagem adicionada." />
    }
</RadzenCard>

<style>
  .thumb { position: relative; }
  .thumb-delete { position: absolute; top: 4px; right: 4px; z-index: 10; }

  .thumb-img-box{
    width: 100%;
    height: 160px;
    background: #111;
    border-radius: 6px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    overflow: hidden;
  }

  .thumb-img{
    max-width: 100%;
    max-height: 100%;
    object-fit: contain;
    display: block;
  }

  .rz-text-truncate{
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }
</style>

@code {
    [Parameter] public ObraDto Obra { get; set; } = new();

    protected override async Task OnParametersSetAsync()
    {
        if (Obra != null && Obra.Id > 0)
        {
            Obra.Imagens = await ObraImagemApiService.GetByObraIdAsync(Obra.Id) ?? new();
            StateHasChanged();
        }
        else
        {
            Obra.Imagens = new();
        }
    }

    private async void OnUpload(UploadChangeEventArgs args)
    {
        Obra.Imagens ??= new List<ObraImagemDto>();

        foreach (var file in args.Files)
        {
            try
            {
                var nomeOriginal = Path.GetFileName(file.Name);
                var extensao = Path.GetExtension(file.Name).ToLowerInvariant();
                var nomeUnico = $"{Guid.NewGuid()}{extensao}";

                var pastaDestino = Path.Combine("wwwroot", "Uploads", "Projetos",
                                                Obra.ProjetoId.ToString(),
                                                Obra.Id.ToString(), "Imagens");
                Directory.CreateDirectory(pastaDestino);

                var caminhoFinal = Path.Combine(pastaDestino, nomeUnico);
                await using var stream = file.OpenReadStream(5_000_000);
                await using (var fs = File.Create(caminhoFinal))
                {
                    await stream.CopyToAsync(fs);
                    await fs.FlushAsync();
                }

                var caminhoRelativo = Path.Combine("Uploads", "Projetos",
                                                   Obra.ProjetoId.ToString(),
                                                   Obra.Id.ToString(), "Imagens", nomeUnico)
                                      .Replace("\\", "/");

                var tamanhoKb = (long)Math.Ceiling(file.Size / 1024.0);

                var dto = new ObraImagemDto
                {
                    ObraId = Obra.Id,
                    NomeOriginal = nomeOriginal,
                    CaminhoRelativo = caminhoRelativo,
                    TamanhoEmKb = tamanhoKb,
                    DataHoraCadastro = DateTime.Now
                };

                await ObraImagemApiService.CreateAsync(dto);

                Obra.Imagens.Add(dto);
                NotificationService.Notify(NotificationSeverity.Success, "Imagem salva", $"'{nomeOriginal}' salva com sucesso.");
            }
            catch (Exception ex)
            {
                NotificationService.Notify(NotificationSeverity.Error, "Erro ao salvar", ex.Message);
            }
        }

        StateHasChanged();
    }

    private void AbrirGaleria(ObraImagemDto imagemSelecionada)
    {
        if (Obra.Imagens is null || !Obra.Imagens.Any())
        {
            NotificationService.Notify(NotificationSeverity.Warning, "Aviso", "Não há imagens para exibir na galeria.");
            return;
        }

        DialogService.Open<DialogGaleriaImagens>(
            "Galeria de Fotos",
            new Dictionary<string, object>
            {
                { "Imagens", new List<ObraImagemDto>(Obra.Imagens) }, // cópia para evitar alterações durante a visualização
                { "ImagemInicial", imagemSelecionada }
            },
            new DialogOptions { Width = "90%", Height = "90%", ShowClose = true });
    }

    private async Task ConfirmarRemocao(ObraImagemDto imagem)
    {
        bool? confirm = await DialogService.Confirm(
            $"Deseja realmente remover a imagem '{imagem.NomeOriginal}'?", "Remover Imagem");

        if (confirm == true)
        {
            try
            {
                await ObraImagemApiService.DeleteAsync(imagem.Id);
                Obra.Imagens.Remove(imagem);
                NotificationService.Notify(NotificationSeverity.Info, "Removida", $"Imagem '{imagem.NomeOriginal}' removida.");
            }
            catch (Exception ex)
            {
                NotificationService.Notify(NotificationSeverity.Error, "Erro", $"Erro ao excluir imagem: {ex.Message}");
            }

            StateHasChanged();
        }
    }

    // URL absoluta segura (normaliza path e escapa só o nome do arquivo)
    private string GetImageUrl(ObraImagemDto img)
    {
        if (img == null || string.IsNullOrWhiteSpace(img.CaminhoRelativo)) return "#";

        var path = img.CaminhoRelativo.Replace("\\", "/").TrimStart('/');
        var lastSlash = path.LastIndexOf('/');
        if (lastSlash >= 0 && lastSlash < path.Length - 1)
        {
            var dir = path[..(lastSlash + 1)];
            var file = path[(lastSlash + 1)..];
            path = dir + Uri.EscapeDataString(file);
        }

        return NavigationManager.ToAbsoluteUri(path).ToString();
    }
}
