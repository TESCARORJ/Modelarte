@using ByTescaro.ConstrutorApp.Application.DTOs
@using ByTescaro.ConstrutorApp.UI.Services
@inject PersonalizacaoApiService PersonalizacaoApiService


<!DOCTYPE html>
<html lang="en">



<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link rel="stylesheet" href="@Assets["lib/bootstrap/dist/css/bootstrap.min.css"]" />
    <link rel="stylesheet" href="@Assets["css/font-awesome.min.css"]" />
    <link rel="stylesheet" href="css/app.css" />
    <link rel="stylesheet" href="@Assets["ByTescaro.ConstrutorApp.UI.styles.css"]" />
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">

    <ImportMap />

    @if (!string.IsNullOrEmpty(personalizacao?.FaviconUrl))
    {
        <link rel="icon" href="@personalizacao.FaviconUrl" />
    }
    else
    {
        <link rel="icon" href="favicon.png" />
    }
    <HeadOutlet @rendermode="InteractiveServer" />
    <RadzenTheme Theme="material" @rendermode="InteractiveServer" />
</head>

<body>
    <Routes @rendermode="InteractiveServer" />
    <script src="_framework/blazor.web.js"></script>
    <script src="_content/Radzen.Blazor/Radzen.Blazor.js?v=@(typeof(Radzen.Colors).Assembly.GetName().Version)"></script>
    <script src="js/sidebar.js"></script>



</body>

</html>


@code {
    private PersonalizacaoDto? personalizacao;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            personalizacao = await PersonalizacaoApiService.ObterAsync();
        }
        catch (Exception ex)
        {
            personalizacao = new PersonalizacaoDto();
        }
    }
}