@page "/fornecedor/detalhes/{Id:long}"

@using ByTescaro.ConstrutorApp.Application.DTOs
@using ByTescaro.ConstrutorApp.Application.Utils 
@using ByTescaro.ConstrutorApp.Domain.Enums
@using ByTescaro.ConstrutorApp.UI.Components.Pages
@using ByTescaro.ConstrutorApp.UI.Services
@using Microsoft.AspNetCore.Authorization
@using Radzen 
@using Radzen.Blazor 
@inject FornecedorApiService FornecedorApiService
@inject FornecedorInsumoApiService FornecedorInsumoApiService
@inject FornecedorServicoApiService FornecedorServicoApiService
@inject NavigationManager Navigation
@attribute [Authorize]

<PageTitle>Detalhes do Fornecedor</PageTitle>

<RadzenCard Class="rz-mt-5 rz-p-4 rz-shadow-md rz-rounded-md rz-mx-auto" Style="max-width: 1300px; width: 100%;">
    <RadzenHeading Size="H4" Text="@Titulo" Class="rz-mb-3" /> @* Título dinâmico *@

    @if (fornecedor is null)
    {
        <RadzenText Text="Carregando detalhes do fornecedor ou fornecedor não encontrado." Style="color: gray; padding: 1rem;" />
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-top: 10px;" />
    }
    else
    {
        <RadzenFieldset Text="Dados do Fornecedor" Style="margin-bottom: 1.5rem">
            <RadzenRow>
                <RadzenColumn Size="12" SizeMD="4">
                    <RadzenLabel Text="Nome" />
                    <RadzenTextBox Value="@fornecedor.Nome" ReadOnly Style="width:100%" />
                </RadzenColumn>

                <RadzenColumn Size="12" SizeMD="3">
                    <RadzenLabel Text="Tipo de Fornecedor" />
                    @* Exibe o texto amigável do enum, se disponível *@
                    <RadzenTextBox Value="@(fornecedor.Tipo.HasValue ? EnumHelper.ObterDescricaoEnum(fornecedor.Tipo.Value) : string.Empty)" ReadOnly Style="width:100%" />
                </RadzenColumn>

                <RadzenColumn Size="12" SizeMD="2">
                    <RadzenLabel Text="Tipo de Pessoa" />
                    @* Exibe o texto amigável do enum, se disponível *@
                    <RadzenTextBox Value="@(fornecedor.TipoPessoa.HasValue ? EnumHelper.ObterDescricaoEnum(fornecedor.TipoPessoa.Value) : string.Empty)" ReadOnly Style="width:100%" />
                </RadzenColumn>

                <RadzenColumn Size="12" SizeMD="3">
                    <RadzenLabel Text="CPF/CNPJ" />
                    @* Para RadzenMask, não tem ReadOnly direto. Usamos RadzenTextBox.
                       Para formatar, você precisaria de uma lógica de formatação em C# ou no DTO. *@
                    <RadzenTextBox Value="@fornecedor.CpfCnpj" ReadOnly Style="width:100%" />
                </RadzenColumn>
            </RadzenRow>
        </RadzenFieldset>

        <RadzenFieldset Text="Contato" Style="margin-bottom: 1.5rem">
            <RadzenRow>
                <RadzenColumn Size="12" SizeMD="4">
                    <RadzenLabel Text="Telefone Principal" />
                    <RadzenTextBox Value="@fornecedor.TelefonePrincipal" ReadOnly Style="width:100%" />
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="4">
                    <RadzenLabel Text="WhatsApp" />
                    <RadzenTextBox Value="@fornecedor.TelefoneWhatsApp" ReadOnly Style="width:100%" />
                </RadzenColumn>

                <RadzenColumn Size="12" SizeMD="4">
                    <RadzenLabel Text="Email" />
                    <RadzenTextBox Value="@fornecedor.Email" ReadOnly Style="width:100%" />
                </RadzenColumn>
            </RadzenRow>
        </RadzenFieldset>

        


        @* Grid de Insumos fornecidos *@        
        @if (fornecedor.Tipo.HasValue && (fornecedor.Tipo.Value == TipoFornecedor.Material || fornecedor.Tipo.Value == TipoFornecedor.Misto))
        {
            <FornecedorInsumoGrid @ref="insumoGrid" FornecedorId="@fornecedor.Id" OnInsumosCarregados="HandleInsumosCarregados" />

            <RadzenCard Style="margin-top: 2rem;">
                <RadzenHeading Size="H6" Text="Resumo de Insumos" />
                <RadzenRow Class="rz-p-2">
                    <RadzenColumn Size="12" SizeMD="6">
                        <RadzenLabel Text="Total de Insumos:" />
                        <RadzenText Text="@($"{qtdeInsumos} itens - R$ {totalInsumos:N2}")" Style="font-weight: bold;" />
                    </RadzenColumn>
                </RadzenRow>
            </RadzenCard>
        }

        @* Grid de Serviços fornecidos *@
        @if (fornecedor.Tipo.HasValue && (fornecedor.Tipo.Value == TipoFornecedor.Servico || fornecedor.Tipo.Value == TipoFornecedor.Misto))
        {
            <FornecedorServicoGrid @ref="servicoGrid" FornecedorId="@fornecedor.Id" OnServicosCarregados="HandleServicosCarregados"  />

            <RadzenCard Style="margin-top: 2rem;">
                <RadzenHeading Size="H6" Text="Resumo de Serviços" />
                <RadzenRow Class="rz-p-2">                    
                    <RadzenColumn Size="12" SizeMD="6">
                        <RadzenLabel Text="Total de Serviços:" />
                        <RadzenText Text="@($"{qtdeServicos} itens - R$ {totalServicos:N2}")" Style="font-weight: bold;" />
                    </RadzenColumn>
                </RadzenRow>
            </RadzenCard>
        }

        <RadzenDivider Style="margin: 2rem 0;" />

        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="1rem" Class="rz-mt-3">
            <RadzenButton Text="Voltar"
                          Click="@(() => Navigation.NavigateTo("/fornecedores"))"
                          ButtonStyle="ButtonStyle.Light" />

            <RadzenButton Text="Editar"
                          Icon="edit"
                          Click="@(() => Navigation.NavigateTo($"/fornecedor/editar/{fornecedor.Id}"))"
                          ButtonStyle="ButtonStyle.Primary" />
        </RadzenStack>
    }
</RadzenCard>

@code {
    [Parameter] public long Id { get; set; }
    
    private FornecedorDto? fornecedor;
    private string Titulo => $"Detalhes do Fornecedor: {fornecedor?.Nome ?? "Carregando..."}";

    private int qtdeInsumos;
    private decimal totalInsumos = 0;
    private int qtdeServicos;
    private decimal totalServicos = 0;

    FornecedorInsumoGrid? insumoGrid;
    FornecedorServicoGrid? servicoGrid;

    protected override async Task OnInitializedAsync()
    {
        fornecedor = await FornecedorApiService.GetByIdAsync(Id);
    }

    private void HandleInsumosCarregados(List<FornecedorInsumoDto> insumos)
    {
        qtdeInsumos = insumos.Count;
        totalInsumos = insumos.Sum(i => i.PrecoUnitario);
        StateHasChanged();
    }

    private void HandleServicosCarregados(List<FornecedorServicoDto> servicos)
    {
        qtdeServicos = servicos.Count;
        totalServicos = servicos.Sum(s => s.PrecoUnitario);
        StateHasChanged();
    }
}