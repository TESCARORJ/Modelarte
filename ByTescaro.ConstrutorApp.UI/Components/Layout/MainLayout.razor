@using ByTescaro.ConstrutorApp.Application.DTOs
@using ByTescaro.ConstrutorApp.UI.Services
@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime
@inject PersonalizacaoApiService PersonalizacaoApiService

<HeadContent>
@*     @if (!string.IsNullOrEmpty(personalizacao?.FaviconUrl))
    {
        <link rel="icon" href="@personalizacao.FaviconUrl" />
    } *@
</HeadContent>


<RadzenLayout>

    <RadzenHeader Style="@($"padding: 0.5rem 1rem; background: {personalizacao?.CorHeader}; box-shadow: 0 2px 4px rgba(0,0,0,0.1);")">
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="10px">
            <RadzenSidebarToggle Icon="menu" Click="@ToggleSidebar" Style="@($"color: {personalizacao?.CorMenu}")" />
            <RadzenLabel Text="@personalizacao?.NomeEmpresa" Style="@($"font-size: 1.25rem; font-weight: bold; color: {personalizacao?.CorTextHeader};")" />
        </RadzenStack>
    </RadzenHeader>

    <RadzenSidebar @bind-Expanded="@sidebarExpanded" Responsive="true" Style="background-color: #f8f5fa;">
        <NavMenu />
    </RadzenSidebar>

    <RadzenBody>
        <div class="rz-p-4">
            @Body
        </div>
    </RadzenBody>

    <RadzenFooter Style="text-align: center; padding: 1rem;">
        <small>@((MarkupString)personalizacao?.TextoFooter)</small>
    </RadzenFooter>

    <RadzenDialog />
    <RadzenNotification />
    <RadzenNotification />

</RadzenLayout>

@code {
    private bool sidebarExpanded = true;
    private DotNetObjectReference<MainLayout>? dotNetHelper;
    private PersonalizacaoDto? personalizacao;

    private void ToggleSidebar()
    {
        sidebarExpanded = !sidebarExpanded;
    }

    protected override async Task OnInitializedAsync()
    {
        personalizacao = await PersonalizacaoApiService.ObterAsync();
    }

    [JSInvokable]
    public void CloseSidebar()
    {
        sidebarExpanded = false;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNetHelper = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("sidebarHelper.enableAutoClose", dotNetHelper, ".rz-sidebar");
        }
    }

    public void Dispose()
    {
        dotNetHelper?.Dispose();
    }
}