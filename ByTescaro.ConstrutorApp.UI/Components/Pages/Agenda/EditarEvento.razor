@using ByTescaro.ConstrutorApp.Application.DTOs
@using ByTescaro.ConstrutorApp.Application.Interfaces
@using ByTescaro.ConstrutorApp.Domain.Enums
@using ByTescaro.ConstrutorApp.UI.Services
@using Radzen
@using Radzen.Blazor
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using ByTescaro.ConstrutorApp.Application.Utils

@inject IAgendaService AgendaService
@inject UsuarioApiService UsuarioApiService
@inject IUsuarioLogadoService UsuarioLogadoService
@inject DialogService DialogService
@inject NotificationService NotificationService

<RadzenStack Orientation="Orientation.Vertical" Gap="1rem" Style="padding: 1rem;">
    <RadzenText Text="Detalhes / Editar Evento" TextStyle="TextStyle.H5" />

    @* Exibir o nome do criador do evento no topo *@
    @if (eventoSelecionado != null)
    {
        <RadzenText Text="@($"Criado por: {eventoSelecionado.NomeCriador ?? "Desconhecido"}")" TextStyle="TextStyle.Caption" Class="rz-mb-3" />
    }

    @if (editContext != null && eventoRequest != null)
    {
        <EditForm EditContext="@editContext" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary /> @* O ValidationSummary ainda mostrará erros do DataAnnotations e erros adicionados manualmente *@

            <RadzenFieldset Text="Detalhes do Evento">
                <RadzenStack Orientation="Orientation.Vertical" Gap="0.5rem">
                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenLabel Text="Título: *" Component="Titulo" /> @* Adicionei o '*' para indicar que é obrigatório *@
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="8">
                            <RadzenTextBox @bind-Value="eventoRequest.Titulo" Style="width:100%;" Name="Titulo" ReadOnly="@(!IsCriador)" />
                        </RadzenColumn>
                    </RadzenRow>
                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenLabel Text="Descrição: *" Component="Descricao" /> @* Adicionei o '*' para indicar que é obrigatório *@
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="8">
                            <RadzenTextArea Value="@eventoRequest.Descricao"
                                            ValueChanged="@((string value) => OnDescricaoChanged(value))"
                                            ValueExpression="() => eventoRequest.Descricao"
                                            Style="width:100%; height:300px"
                                            Name="Descricao"
                                            ReadOnly="@(!IsCriador)" />
                        </RadzenColumn>
                    </RadzenRow>
                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenLabel Text="Início: *" Component="DataHoraInicio" /> @* Adicionei o '*' para indicar que é obrigatório *@
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="8">
                            <RadzenDatePicker @bind-Value="eventoRequest.DataHoraInicio" ShowTime="true" DateFormat="dd/MM/yyyy HH:mm"
                                              Style="width:100%;" Name="DataHoraInicio" ReadOnly="@(!IsCriador)" />
                        </RadzenColumn>
                    </RadzenRow>
                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenLabel Text="Término: *" Component="DataHoraTermino" /> @* Adicionei o '*' para indicar que é obrigatório *@
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="8">
                            <RadzenDatePicker @bind-Value="eventoRequest.DataHoraFim" ShowTime="true" DateFormat="dd/MM/yyyy HH:mm"
                                              Style="width:100%;" Name="DataHoraFim" ReadOnly="@(!IsCriador)" />
                        </RadzenColumn>
                    </RadzenRow>
                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenLabel Text="Visibilidade:" Component="Visibilidade" />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="8">
                            <RadzenDropDown @bind-Value="eventoRequest.Visibilidade" Data="@VisibilidadeList"
                                            TextProperty="Label" ValueProperty="Value"
                                            Style="width:100%;" Name="Visibilidade" ReadOnly="@(!IsCriador)" />
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenStack>
            </RadzenFieldset>

            <RadzenFieldset Text="Participantes (Convidados)" Class="rz-mt-3">
                <RadzenStack Orientation="Orientation.Vertical" Gap="0.5rem">
                    @if (IsCriador)
                    {
                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="4">
                                <RadzenLabel Text="Selecionar Usuários:" Component="Participantes" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="8">
                                <RadzenDropDown @bind-Value="eventoRequest.IdsParticipantesConvidados" Data="@usuariosDisponiveis"
                                                TextProperty="Nome" ValueProperty="Id" Multiple="true"
                                                AllowClear="true" Style="width:100%;" Name="Participantes">
                                    <Template Context="userContext">
                                        <div>
                                            <strong>@userContext.Nome</strong> - @userContext.Email
                                        </div>
                                    </Template>
                                </RadzenDropDown>

                                @if (usuariosDisponiveis != null && !usuariosDisponiveis.Any())
                                {
                                    <RadzenText Text="Nenhum usuário disponível para convite (após filtro)." TextStyle="TextStyle.Caption" Class="rz-color-info rz-mt-2" />
                                }
                            </RadzenColumn>
                        </RadzenRow>
                    }
                    <RadzenRow>
                        <RadzenColumn Size="12">
                            <RadzenDataGrid Data="@eventoSelecionado?.Participantes" AllowPaging="false" AllowSorting="false"
                                            TItem="ParticipanteEventoDto" Density="Density.Compact">
                                <Columns>
                                    <RadzenDataGridColumn TItem="ParticipanteEventoDto" Property="NomeUsuario" Title="Participante" />
                                    <RadzenDataGridColumn TItem="ParticipanteEventoDto" Property="StatusParticipacao" Title="Status" />
                                    <RadzenDataGridColumn TItem="ParticipanteEventoDto" Context="data" Width="80px" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
                                        <Template Context="participante">
                                            @if (IsCriador && participante.UsuarioId != usuarioLogadoId)
                                            {
                                                <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Size="ButtonSize.ExtraSmall"
                                                              Click="@(() => RemoverParticipante(participante.UsuarioId))" />
                                            }
                                        </Template>
                                    </RadzenDataGridColumn>
                                </Columns>
                            </RadzenDataGrid>
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenStack>
            </RadzenFieldset>

            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0.5rem" Class="rz-mt-3">
                @if (IsCriador)
                {
                    <RadzenButton ButtonType="ButtonType.Submit" Text="Salvar Alterações" Icon="save" Variant="Variant.Flat" />
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Text="Excluir Evento" Icon="delete" Variant="Variant.Flat"
                                  Click="@OnDelete" />
                }
                <RadzenButton ButtonStyle="ButtonStyle.Light" Text="Cancelar" Click="@OnCancel" Variant="Variant.Flat" />
            </RadzenStack>
        </EditForm>
    }
    else
    {
        <RadzenText Text="Carregando detalhes do evento..." TextStyle="TextStyle.Body1" />
    }
</RadzenStack>

@code {
    [Parameter]
    public long EventoId { get; set; }

    private AtualizarEventoRequest? eventoRequest;
    private EventoDto? eventoSelecionado;
    private EditContext? editContext;
    private ValidationMessageStore? messageStore; // Adicionado para exibir erros customizados no ValidationSummary
    private IEnumerable<UsuarioDto> usuariosDisponiveis = new List<UsuarioDto>();
    private long usuarioLogadoId;
    private bool IsCriador => eventoSelecionado?.UsuarioCadastroId == usuarioLogadoId;

    // A lista de visibilidade não deve incluir nulo se queremos garantir uma seleção padrão
    private List<EnumOption<Visibilidade>> VisibilidadeList = EnumHelper.ListarOpcoes<Visibilidade>(incluirNulo: false);



    protected override async Task OnInitializedAsync()
    {
        var usuario = await UsuarioLogadoService.ObterUsuarioAtualAsync();
        if (usuario != null)
        {
            usuarioLogadoId = usuario.Id;
            await CarregarDetalhesEvento(); // Carrega eventoSelecionado e inicializa eventoRequest

            if (eventoRequest != null)
            {
                // Garante que as propriedades de string e lista não sejam nulas
                eventoRequest.Titulo ??= string.Empty;
                eventoRequest.Descricao ??= string.Empty;
                eventoRequest.IdsParticipantesConvidados ??= new List<long>();

                // Inicializa EditContext e ValidationMessageStore APÓS eventoRequest ser carregado
                editContext = new EditContext(eventoRequest);
                messageStore = new ValidationMessageStore(editContext);

                // Assina eventos para validação em tempo real
                editContext.OnValidationRequested += (sender, eventArgs) => messageStore?.Clear();
                editContext.OnFieldChanged += (sender, eventArgs) => ValidateField(eventArgs.FieldIdentifier);
            }

            // Carrega usuários disponíveis apenas se o usuário logado for o criador
            if (IsCriador)
            {
                usuariosDisponiveis = (await UsuarioApiService.GetAllAtivosAsync())?.Where(u => u.Id != usuarioLogadoId).ToList() ?? new List<UsuarioDto>();
            }
            else
            {
                usuariosDisponiveis = new List<UsuarioDto>();
            }
        }
        else
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Erro", Detail = "Usuário não autenticado." });
            DialogService.Close(false);
        }
    }


    private Task OnDescricaoChanged(string value)
    {
        if (eventoRequest is null) return Task.CompletedTask;

        eventoRequest.Descricao = value ?? string.Empty;
        editContext?.NotifyFieldChanged(new FieldIdentifier(eventoRequest, nameof(eventoRequest.Descricao)));
        return Task.CompletedTask;
    }

    private async Task CarregarDetalhesEvento()
    {
        try
        {
            eventoSelecionado = await AgendaService.ObterEventoPorIdAsync(EventoId, usuarioLogadoId);
            if (eventoSelecionado != null)
            {
                eventoRequest = new AtualizarEventoRequest
                    {
                        Id = eventoSelecionado.Id,
                        Titulo = eventoSelecionado.Titulo ?? string.Empty,
                        Descricao = eventoSelecionado.Descricao ?? string.Empty,
                        DataHoraInicio = eventoSelecionado.DataHoraInicio,
                        DataHoraFim = eventoSelecionado.DataHoraFim,
                        EhRecorrente = eventoSelecionado.EhRecorrente,
                        FrequenciaRecorrencia = eventoSelecionado.FrequenciaRecorrencia,
                        DataFimRecorrencia = eventoSelecionado.DataFimRecorrencia,
                        Visibilidade = eventoSelecionado.Visibilidade,
                        IdsParticipantesConvidados = eventoSelecionado.Participantes?.Select(p => p.UsuarioId).ToList() ?? new List<long>()
                    };
            }
            else
            {
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Evento não encontrado", Detail = "O evento selecionado não pôde ser carregado." });
                DialogService.Close(false);
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Erro ao carregar evento", Detail = ex.Message });
            DialogService.Close(false);
        }
    }

    private void ValidateField(FieldIdentifier fieldIdentifier)
    {
        // Só valida campos se o usuário for o criador
        if (!IsCriador || eventoRequest is null) return;

        messageStore?.Clear(fieldIdentifier);

        // Chame ValidateForm para obter todos os erros, e filtre pelo campo atual
        var allErrors = ValidateForm(eventoRequest);
        var fieldErrors = allErrors.Where(error =>
        {
            // Lógica para associar o erro à propriedade correta, baseada no texto do erro ou no nome do campo
            if (fieldIdentifier.FieldName == nameof(AtualizarEventoRequest.Titulo) && error.Contains("Título", StringComparison.OrdinalIgnoreCase)) return true;
            if (fieldIdentifier.FieldName == nameof(AtualizarEventoRequest.Descricao) && error.Contains("Descrição", StringComparison.OrdinalIgnoreCase)) return true;
            if (fieldIdentifier.FieldName == nameof(AtualizarEventoRequest.DataHoraInicio) && error.Contains("Início", StringComparison.OrdinalIgnoreCase)) return true;
            if (fieldIdentifier.FieldName == nameof(AtualizarEventoRequest.DataHoraFim) && error.Contains("Término", StringComparison.OrdinalIgnoreCase)) return true;
            if (fieldIdentifier.FieldName == nameof(AtualizarEventoRequest.Visibilidade) && error.Contains("Visibilidade", StringComparison.OrdinalIgnoreCase)) return true;
            return false;
        }).ToList();

        foreach (var error in fieldErrors)
        {
            messageStore?.Add(fieldIdentifier, error);
        }
        editContext?.NotifyValidationStateChanged();
    }


    private async Task HandleValidSubmit()
    {
        // Só permite a submissão se o usuário for o criador
        if (!IsCriador)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Permissão Negada", Detail = "Você não tem permissão para editar este evento." });
            return;
        }

        if (eventoRequest is null || editContext is null)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Erro Interno", Detail = "O formulário não foi inicializado corretamente." });
            return;
        }

        // Limpa todas as mensagens de validação existentes no EditContext antes de revalidar
        messageStore?.Clear();
        editContext.NotifyValidationStateChanged(); // Notifica para limpar os erros visíveis

        // Primeiro, o DataAnnotationsValidator (se você tiver atributos [Required] etc. no DTO)
        var isValidDataAnnotations = editContext.Validate();

        // Validação customizada
        var validationErrors = ValidateForm(eventoRequest);

        if (validationErrors.Any())
        {
            // Adiciona os erros customizados ao ValidationMessageStore para que apareçam no ValidationSummary
            foreach (var error in validationErrors)
            {
                // Por simplicidade, adiciona como um erro geral do modelo.
                // Para associar a campos específicos, seria preciso uma lógica mais complexa em ValidateForm.
                messageStore?.Add(new FieldIdentifier(eventoRequest, ""), error);
            }
            editContext.NotifyValidationStateChanged(); // Notifica o EditContext para atualizar a UI

            // Notifica o usuário com mensagens pop-up também
            foreach (var error in validationErrors)
            {
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Erro de Validação", Detail = error });
            }
            return; // Impede a submissão se houver erros de validação
        }

        // Se o DataAnnotationsValidator encontrou problemas e eles não foram replicados em ValidateForm
        if (!isValidDataAnnotations)
        {
            // Os erros de DataAnnotations já estarão no ValidationSummary.
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Validação", Detail = "Por favor, corrija os erros do formulário." });
            return;
        }

        try
        {
            await AgendaService.AtualizarEventoAsync(eventoRequest, usuarioLogadoId);
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Sucesso", Detail = "Evento atualizado com sucesso!" });
            DialogService.Close(true);
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Erro ao atualizar evento", Detail = ex.Message });
            DialogService.Close(false);
        }
    }

    private List<string> ValidateForm(AtualizarEventoRequest model)
    {
        var errors = new List<string>();

        // Validação de Título
        if (string.IsNullOrWhiteSpace(model.Titulo))
        {
            errors.Add("Título é obrigatório.");
        }

        // Validação de Descrição
        if (string.IsNullOrWhiteSpace(model.Descricao))
        {
            errors.Add("Descrição é obrigatória.");
        }

        // Validação de DataHoraInicio
        if (model.DataHoraInicio == default(DateTime) || model.DataHoraInicio == DateTime.MinValue)
        {
            errors.Add("Data e Hora de Início são obrigatórias.");
        }

        // Validação de DataHoraFim
        if (model.DataHoraFim == default(DateTime) || model.DataHoraFim == DateTime.MinValue)
        {
            errors.Add("Data e Hora de Término são obrigatórias.");
        }
        else if (model.DataHoraFim <= model.DataHoraInicio)
        {
            errors.Add("A data de término deve ser posterior à data de início.");
        }

        // Validação de Visibilidade
        // Como 'incluirNulo: false' é usado, Visibilidade deve ter um valor.
        // A verificação Enum.IsDefined é um bom fallback.
        if (!Enum.IsDefined(typeof(Visibilidade), model.Visibilidade))
        {
            errors.Add("Visibilidade é obrigatória e deve ser um valor válido.");
        }

        return errors;
    }

    private async Task RemoverParticipante(long usuarioId)
    {
        // Só permite a remoção se o usuário for o criador
        if (!IsCriador)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Permissão Negada", Detail = "Você não tem permissão para remover participantes deste evento." });
            return;
        }

        var confirm = await DialogService.Confirm("Tem certeza que deseja remover este participante?", "Confirmação", new ConfirmOptions { OkButtonText = "Sim", CancelButtonText = "Não" });
        if (confirm == true)
        {
            if (eventoRequest is null) return;

            try
            {
                eventoRequest.IdsParticipantesConvidados = eventoRequest.IdsParticipantesConvidados.Where(id => id != usuarioId).ToList();
                if (eventoSelecionado?.Participantes != null)
                {
                    eventoSelecionado.Participantes = eventoSelecionado.Participantes.Where(p => p.UsuarioId != usuarioId).ToList();
                }

                // Atualiza o evento no serviço, passando o ID do criador para validação
                await AgendaService.AtualizarEventoAsync(eventoRequest, usuarioLogadoId);

                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Sucesso", Detail = "Participante removido com sucesso!" });
                // Re-carregar detalhes para garantir que a UI reflita o estado mais recente
                await CarregarDetalhesEvento();
                StateHasChanged(); // Força a atualização da UI
            }
            catch (Exception ex)
            {
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Erro ao remover participante", Detail = ex.Message });
            }
        }
    }

    async Task OnDelete()
    {
        // Só permite a exclusão se o usuário for o criador
        if (!IsCriador)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Permissão Negada", Detail = "Você não tem permissão para excluir este evento." });
            return;
        }

        var confirm = await DialogService.Confirm("Tem certeza que deseja excluir este evento?", "Confirmação de Exclusão", new ConfirmOptions { OkButtonText = "Sim", CancelButtonText = "Não" });
        if (confirm == true)
        {
            try
            {
                await AgendaService.ExcluirEventoAsync(EventoId, usuarioLogadoId);
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Sucesso", Detail = "Evento excluído com sucesso!" });
                DialogService.Close(true);
            }
            catch (Exception ex)
            {
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Erro ao excluir evento", Detail = ex.Message });
                DialogService.Close(false);
            }
        }
    }

    void OnCancel()
    {
        DialogService.Close(false);
    }
}