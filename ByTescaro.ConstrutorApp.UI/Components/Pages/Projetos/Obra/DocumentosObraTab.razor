@using ByTescaro.ConstrutorApp.Application.DTOs
@using ByTescaro.ConstrutorApp.UI.Services 
@using ByTescaro.ConstrutorApp.Domain.Enums
@using ByTescaro.ConstrutorApp.Application.Utils
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject ObraDocumentoApiService ObraDocumentoApiService 
@inject ObraApiService ObraApiService 

<RadzenCard Class="rz-p-4">
    <RadzenHeading Size="H6" Text="Upload de Documentos" />

    <RadzenUpload Style="width: 100%"
                  Multiple="true"
                  Change=@ProcessarUpload
                  Accept=@accepts
                  ChooseText="Selecionar Documentos"
                  InputAttributes="@(new Dictionary<string,object>{{ "aria-label", "select file" }})" />

    <RadzenDivider Style="margin: 1rem 0" />

    @if (Obra.Documentos?.Any() == true)
    {
        <RadzenDataList Data="@Obra.Documentos" TItem="ObraDocumentoDto">
            <Template Context="doc">
                <RadzenPanel>
                    <HeaderTemplate>
                        <b>@doc.NomeOriginal (@doc.Extensao.ToUpper()) - @doc.TamanhoEmKb KB</b>
                    </HeaderTemplate>
                    <ChildContent>
                        <RadzenButton Icon="open_in_new" Text="Abrir"
                                      ButtonStyle="ButtonStyle.Light"
                                      Click="@(() => AbrirDocumento(doc))" />
                        <RadzenButton Icon="delete" Text="Excluir"
                                      ButtonStyle="ButtonStyle.Danger"
                                      Click="@(() => ConfirmarRemocao(doc))" />
                    </ChildContent>
                </RadzenPanel>
            </Template>
        </RadzenDataList>

    }
    else
    {
        <RadzenText Text="Nenhum documento enviado." />
    }
</RadzenCard>

@code {
    [Parameter] public ObraDto Obra { get; set; } = new();

    private string accepts => string.Join(", ", Enum.GetValues<ExtensaoDocumentoPermitida>().Select(e => $".{e.ToString().ToLower()}"));

    protected override async Task OnParametersSetAsync()
    {
        // Garante que o Obra.Id seja válido antes de buscar os dados
        if (Obra != null && Obra.Id > 0)
        {
            // Carrega os documentos associados a esta obra
            Obra.Documentos = await ObraDocumentoApiService.GetByObraIdAsync(Obra.Id);
            StateHasChanged();
        }
    }

    private async void ProcessarUpload(UploadChangeEventArgs args)
    {
        if (Obra.Documentos == null)
            Obra.Documentos = new List<ObraDocumentoDto>();

        foreach (var file in args.Files)
        {
            var extensao = Path.GetExtension(file.Name).ToLower().TrimStart('.');

            if (!Enum.TryParse<ExtensaoDocumentoPermitida>(extensao.ToUpper(), out _))
            {
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Erro", Detail = $"Extensão '{extensao}' não permitida." });
                continue;
            }

            try
            {
                var nomeOriginal = Path.GetFileName(file.Name);
                var pastaDestino = Path.Combine("wwwroot", "Uploads", "Projetos", Obra.ProjetoId.ToString(), Obra.Id.ToString(), "Documentos");
                Directory.CreateDirectory(pastaDestino);

                var caminhoFinal = Path.Combine(pastaDestino, nomeOriginal);

                // Comprimir e salvar o arquivo físico
                await using var streamComprimido = await DocumentoCompressorService.ComprimirSeNecessarioAsync(file);
                await using var fs = File.Create(caminhoFinal);
                await streamComprimido.CopyToAsync(fs);

                var tamanhoKb = streamComprimido.Length / 1024;

                var documentoDto = new ObraDocumentoDto
                {
                    ObraId = Obra.Id,
                    NomeOriginal = nomeOriginal,
                    CaminhoRelativo = Path.Combine("Uploads", "Projetos", Obra.ProjetoId.ToString(), Obra.Id.ToString(), "Documentos", nomeOriginal).Replace("\\", "/"),
                    Extensao = extensao,
                    TamanhoEmKb = tamanhoKb,
                    DataHoraCadastro = DateTime.Now,
                    // UsuarioCadastroId e UsuarioCadastroNome serão preenchidos no serviço, se necessário, ou via DTO
                };

                // Chamar o serviço de API para criar o registro no banco de dados
                await ObraDocumentoApiService.CreateAsync(documentoDto);

                // O documentoDto agora deve ter o Id preenchido pelo serviço
                Obra.Documentos.Add(documentoDto);

                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Sucesso", Detail = $"Documento '{nomeOriginal}' salvo com sucesso." });
            }
            catch (Exception ex)
            {
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Erro", Detail = $"Erro ao salvar '{file.Name}': {ex.Message}" });
            }
        }

        StateHasChanged();
    }


    private async Task AbrirDocumento(ObraDocumentoDto doc)
    {
        var url = NavigationManager.BaseUri + doc.CaminhoRelativo;
        await JS.InvokeVoidAsync("open", url, "_blank");
    }


    private async Task ConfirmarRemocao(ObraDocumentoDto doc)
    {
        bool? confirm = await DialogService.Confirm($"Deseja realmente remover o documento '{doc.NomeOriginal}'?", "Remover Documento");

        if (confirm == true)
        {
            try
            {
                // A remoção do arquivo físico e do registro no BD será feita pelo serviço
                await ObraDocumentoApiService.DeleteAsync(doc.Id);

                Obra.Documentos.Remove(doc);
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "Removido", Detail = $"Documento '{doc.NomeOriginal}' removido." });
            }
            catch (Exception ex)
            {
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Erro", Detail = $"Erro ao remover o documento: {ex.Message}" });
            }
        }
        StateHasChanged();
    }
}