@using ByTescaro.ConstrutorApp.Application.DTOs
@using ByTescaro.ConstrutorApp.Domain.Enums
@using ByTescaro.ConstrutorApp.UI.Services
@using System.ComponentModel.DataAnnotations
@using System.Reflection
@inject ObraInsumoApiService InsumoService
@inject ObraInsumoListaApiService ListaService
@inject NotificationService NotificationService
@inject DialogService DialogService

<RadzenCard Style="padding: 1rem; margin-bottom: 1rem">
    <RadzenRow AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween" Gap="1rem" Class="rz-mb-4">
        <RadzenColumn Size="12" SizeMD="6" Class="rz-mb-2 rz-mb-md-0">
            <RadzenStack Orientation="Orientation.Vertical" Gap="0.25rem">
                <RadzenLabel Text="Data de Envio" />
                <RadzenDatePicker @bind-Value="Lista.Data" Style="width: 100%;" DateFormat="dd/MM/yyyy" />
            </RadzenStack>
        </RadzenColumn>

        <RadzenColumn Size="12" SizeMD="6">
            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" JustifyContent="JustifyContent.End" Wrap="FlexWrap.Wrap">
                <RadzenButton Icon="save"
                              Text="Salvar Alterações"
                              ButtonStyle="ButtonStyle.Primary"
                              Size="ButtonSize.Small"
                              Click="SalvarLista" />

                <RadzenButton Icon="delete"
                              Text="Excluir Lista"
                              ButtonStyle="ButtonStyle.Danger"
                              Size="ButtonSize.Small"
                              Click="ConfirmarRemocaoLista" />
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>

    <RadzenRow Gap="1rem" Class="rz-mb-2">
        <RadzenColumn Size="12" SizeLG="5">
            <RadzenDropDown Data="@InsumosDisponiveis"
                            TextProperty="Nome"
                            ValueProperty="Id"
                            Multiple="true"
                            @bind-Value="_insumosSelecionados"
                            Placeholder="Insumos Disponíveis"
                            Style="width: 100%;" />
        </RadzenColumn>

        <RadzenColumn Size="12" SizeLG="5">
            <RadzenDropDown Data="@InsumosRelacionadosEtapa"
                            TextProperty="Nome"
                            ValueProperty="Id"
                            Multiple="true"
                            @bind-Value="_insumosRelacionadosSelecionados"
                            Placeholder="Insumos por Etapa"
                            Style="width: 100%;" />
        </RadzenColumn>

        <RadzenColumn Size="12" SizeLG="2">
            <RadzenNumeric @bind-Value="QuantidadeSelecionada"
                           TValue="decimal"
                           Style="width: 100%;"
                           Min="0.1m"
                           Step="1"
                           Placeholder="Qtd."
                           ShowUpDown="true" />
        </RadzenColumn>
    </RadzenRow>

    <RadzenStack JustifyContent="JustifyContent.Start" Class="rz-mb-4">
        <RadzenButton Text="Atualizar Itens da Lista"
                      Icon="sync"
                      Disabled="@(!_insumosSelecionados.Any() && !_insumosRelacionadosSelecionados.Any())"
                      Click="@AdicionarInsumos" />
    </RadzenStack>

    <RadzenDataGrid TItem="ObraInsumoDto" Data="@Lista.Itens"
                    Responsive="true"
                    ShowPagingSummary="false" AllowPaging="false" AllowColumnResize="true"
                    AllowSorting="true" PagerHorizontalAlign="HorizontalAlign.Left"
                    ColumnWidth="200px"
                    Editable="true" EditMode="DataGridEditMode.Single"
                    AutoGenerateColumns="false" Class="rz-mt-2">
        <Columns>
            <RadzenDataGridColumn TItem="ObraInsumoDto" Property="InsumoNome" Title="Insumo" />

            <RadzenDataGridColumn TItem="ObraInsumoDto" Property="Quantidade" Title="Quantidade">
                <EditTemplate Context="item">
                    <RadzenNumeric TValue="decimal" @bind-Value="item.Quantidade" Style="width:100%;" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="ObraInsumoDto" Property="UnidadeMedida" Title="Unidade de Medida" Sortable="false">
                <Template Context="item">
                    @ObterNomeUnidade(item.UnidadeMedida)
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="ObraInsumoDto" Title="" Width="60px" Sortable="false" TextAlign="TextAlign.Center">
                <Template Context="item">
                    <RadzenButton Icon="delete"
                                  ButtonStyle="ButtonStyle.Danger"
                                  Size="ButtonSize.Small"
                                  Click="@(() => ConfirmarRemocaoItem(item))" />
                </Template>
                <EditTemplate Context="item">
                    <RadzenButton Icon="delete"
                                  ButtonStyle="ButtonStyle.Danger"
                                  Size="ButtonSize.Small"
                                  Click="@(() => ConfirmarRemocaoItem(item))" />
                </EditTemplate>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</RadzenCard>

@code {
    [Parameter] public ObraInsumoListaDto? Lista { get; set; }
    [Parameter] public ObraDto Obra { get; set; } = new();

    // Renomeado para melhor clareza. Indica que uma mudança na lista ocorreu.
    [Parameter] public EventCallback OnListChanged { get; set; }

    private List<InsumoDto> InsumosDisponiveis = new();
    private List<InsumoDto> InsumosRelacionadosEtapa = new();

    private List<long> _insumosSelecionados = new();
    private List<long> _insumosRelacionadosSelecionados = new();

    private decimal QuantidadeSelecionada { get; set; } = 1;

    private List<ObraInsumoDto> _insumosOriginais = new();
    private List<long> _insumosRemovidos = new();

    protected override async Task OnInitializedAsync()
    {
        // Se Lista for nula, inicialize-a para evitar NullReferenceException
        Lista ??= new ObraInsumoListaDto
            {
                ObraId = Obra.Id,
                Data = DateOnly.FromDateTime(DateTime.Today),
                Itens = new List<ObraInsumoDto>()
            };

        await LoadInsumosData();

        if (Lista.Itens != null)
        {
            _insumosOriginais = Lista.Itens.Select(i => new ObraInsumoDto
                {
                    Id = i.Id,
                    ObraInsumoListaId = i.ObraInsumoListaId,
                    InsumoId = i.InsumoId,
                    InsumoNome = i.InsumoNome,
                    UnidadeMedida = i.UnidadeMedida,
                    Quantidade = i.Quantidade
                }).ToList();
        }
    }

    private async Task LoadInsumosData()
    {
        InsumosDisponiveis = await InsumoService.GetInsumosDisponiveisAsync(Obra.Id);

        var relacionadosEtapa = await InsumoService.GetInsumosPadraoRelacionadosAsync(Obra.Id);

        InsumosRelacionadosEtapa = relacionadosEtapa
          .Select(p => new InsumoDto
              {
                  Id = p.Id,
                  Nome = p.Nome,
                  UnidadeMedida = p.UnidadeMedida
              })
          .ToList();
    }

    private async Task SalvarLista()
    {
        if (Lista is null || Lista.Itens is null || !Lista.Itens.Any())
        {
            NotificationService.Notify(NotificationSeverity.Warning, "Validação", "Adicione ao menos um item à lista.");
            return;
        }

        try
        {
            if (Lista.Id == 0)
            {
                var novaLista = await ListaService.CreateAsync(Lista);
                if (novaLista is not null)
                {
                    // A substituição da lista no Obra.ListasInsumo deve ser feita no componente pai
                    // ou o pai deve recarregar a Obra completa.
                    Lista = novaLista; // Atualiza a instância local do Lista
                    NotificationService.Notify(NotificationSeverity.Success, "Sucesso", "Nova lista de insumos criada com sucesso.");
                }
                else
                {
                    NotificationService.Notify(NotificationSeverity.Error, "Erro", "Falha ao criar nova lista.");
                    return;
                }
            }
            else
            {
                await ListaService.UpdateAsync(Lista);
                NotificationService.Notify(NotificationSeverity.Success, "Sucesso", "Lista de insumos atualizada com sucesso.");
            }

            // Notificar o componente pai que uma mudança na lista ocorreu, para que ele recarregue a Obra.
            await OnListChanged.InvokeAsync();
            StateHasChanged(); // Renderiza este componente para refletir o ID, se aplicável
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Erro", $"Falha ao salvar lista: {ex.Message}");
        }
    }

    private async Task ConfirmarRemocaoItem(ObraInsumoDto item)
    {
        bool? confirm = await DialogService.Confirm($"Remover o insumo '{item.InsumoNome}'?", "Confirmação");
        if (confirm == true)
        {
            _insumosRemovidos.Add(item.InsumoId);
            Lista!.Itens = Lista.Itens.Where(i => i.InsumoId != item.InsumoId).ToList();
            StateHasChanged();
        }
    }

    private async Task ConfirmarRemocaoLista()
    {
        bool? confirm = await DialogService.Confirm($"Excluir a lista de {Lista!.NomeResponsavel}?", "Excluir Lista");
        if (confirm == true)
        {
            if (Lista.Id > 0)
            {
                await ListaService.DeleteAsync(Lista.Id);
                NotificationService.Notify(NotificationSeverity.Success, "Sucesso", "Lista de insumos excluída com sucesso.");
            }
            else
            {
                // Se a lista ainda não foi salva (Id == 0), apenas remova-a localmente
                // (a ação de remover do Obra.ListasInsumo será feita no pai ao recarregar a Obra)
            }

            // Notificar o componente pai para recarregar a Obra após a exclusão da lista.
            await OnListChanged.InvokeAsync();
        }
    }

    private async Task AdicionarInsumos()
    {
        Lista!.Itens ??= new();

        var todosSelecionados = _insumosSelecionados
          .Concat(_insumosRelacionadosSelecionados)
          .Distinct()
          .ToList();

        var baseAtualizada = Lista.Itens
          .Where(i => !_insumosRemovidos.Contains(i.InsumoId)) // Considera itens já removidos
          .ToList();

        foreach (var id in todosSelecionados)
        {
            if (!baseAtualizada.Any(i => i.InsumoId == id))
            {
                var insumo = InsumosDisponiveis.Concat(InsumosRelacionadosEtapa)
                  .FirstOrDefault(i => i.Id == id);

                if (insumo is not null)
                {
                    baseAtualizada.Add(new ObraInsumoDto
                        {
                            ObraInsumoListaId = Lista.Id,
                            InsumoId = insumo.Id,
                            InsumoNome = insumo.Nome,
                            UnidadeMedida = insumo.UnidadeMedida,
                            Quantidade = QuantidadeSelecionada
                        });
                }
            }
        }

        Lista.Itens = baseAtualizada;

        // Limpa as seleções após adicionar
        _insumosSelecionados.Clear();
        _insumosRelacionadosSelecionados.Clear();
        QuantidadeSelecionada = 1;

        // Se a lista já tem um ID, salva as alterações dos itens imediatamente
        // Caso contrário, eles serão salvos quando a lista principal for salva
        if (Lista.Id > 0)
        {
            try
            {
                await ListaService.UpdateAsync(Lista); // Salva as alterações dos itens
                NotificationService.Notify(NotificationSeverity.Success, "Atualizado", "Itens adicionados e salvos com sucesso.");
            }
            catch (Exception ex)
            {
                NotificationService.Notify(NotificationSeverity.Error, "Erro", $"Erro ao atualizar itens da lista: {ex.Message}");
            }
        }
        else
        {
            NotificationService.Notify(NotificationSeverity.Info, "Itens Adicionados", "Itens adicionados à nova lista. Salve a lista para persistir.");
        }

        StateHasChanged();
    }

    private static string ObterNomeUnidade(UnidadeMedida? unidade)
    {
        if (unidade is null) return "";
        var member = unidade.Value.GetType().GetMember(unidade.ToString() ?? "").FirstOrDefault();
        var display = member?.GetCustomAttribute<DisplayAttribute>();
        return display?.Name ?? unidade.ToString();
    }
}