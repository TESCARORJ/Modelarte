@* @inject ProjetoApiService ProjetoApiService
@inject ISnackbar Snackbar
@using ByTescaro.ConstrutorApp.Application.DTOs
@using ByTescaro.ConstrutorApp.Domain.Entities
@using ByTescaro.ConstrutorApp.Web.Services
@using MudBlazor
@using Microsoft.AspNetCore.Components

<MudDialog>
    <DialogContent>

        @if (etapas is null || !etapas.Any())
        {
            <MudText>Sem etapas cadastradas.</MudText>
        }
        else
        {
            @foreach (var etapa in etapas.OrderBy(e => e.Ordem))
            {
                <MudPaper Class="pa-4 mb-4" Elevation="2">
                    <MudText Typo="Typo.subtitle1">@etapa.NomeEtapa</MudText>
                    <MudDivider Class="mb-2" />

                    @foreach (var item in etapa.Itens.OrderBy(i => i.Ordem))
                    {
                        var (cor, texto) = ObterStatusPrazoItem(item);

                        <div class="d-flex align-center justify-space-between mb-2">
                            <div class="d-flex align-center" style="flex: 1;">
                                <MudText Typo="Typo.body1">- @item.Nome</MudText>
                                <MudText Typo="Typo.caption" Class="ml-2">(<b>@(item.Concluido ? "Concluído" : "Há Fazer")</b>)</MudText>
                            </div>
                            <div class="d-flex align-center" style="gap: 8px;">
                                <MudAvatar Color="@GetMudColor(cor)" Size="Size.Small" />
                                <MudText Typo="Typo.caption" Class="font-weight-bold">@texto</MudText>
                            </div>
                        </div>
                    }
                </MudPaper>
            }
        }
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="Fechar" Color="Color.Secondary">Fechar</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter] public long ProjetoId { get; set; }
    private ProjetoDto? projeto; 


    private List<ProjetoEtapaDto> etapas = new();
    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            etapas = await ProjetoApiService.ObterEtapasAsync(ProjetoId);
            projeto = await ProjetoApiService.GetByIdAsync(ProjetoId);

        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao carregar etapas: {ex.Message}", Severity.Error);
        }
    }

    private void Fechar()
    {
        MudDialog.Close();
    }

    private (string Cor, string Texto) ObterStatusPrazoItem(ProjetoItemEtapaDto item)
    {
        if (!item.IsDataPrazo)
            return ("Gray", "Sem prazo");

        // Se DataPrazoCalculada for nula, tentar calcular agora usando DiasPrazo
        DateTime dataBase = projeto.DataInicioExecucao ?? projeto.DataInicio ?? DateTime.Now;

        int diasPrazo = item.DiasPrazo ?? 0;

        DateTime? dataPrazoCalculada = item.DataPrazoCalculada ?? (diasPrazo > 0 ? dataBase.AddDays(diasPrazo) : (DateTime?)null);

        if (dataPrazoCalculada == null)
            return ("Gray", "Sem prazo");

        var diasRestantes = (dataPrazoCalculada.Value.Date - DateTime.Now.Date).Days;

        if (item.Concluido)
            return ("Green", "Concluído");

        if (diasRestantes > 1)
            return ("Green", $"Faltam {diasRestantes} dias");
        else if (diasRestantes == 1)
            return ("Orange", "Vence amanhã");
        else if (diasRestantes == 0)
            return ("Red", "Vence hoje");
        else
            return ("Red", $"Atrasado há {Math.Abs(diasRestantes)} dias");
    }


    private Color GetMudColor(string cor)
    {
        return cor switch
        {
            "Green" => Color.Success,
            "Orange" => Color.Warning,
            "Red" => Color.Error,
            "Gray" => Color.Default,
            _ => Color.Default
        };
    }
}
 *@