@page "/importar/funcionarios"
@inject HttpClient Http
@inject FuncionarioImportacaoApiService ImportacaoService
@inject NotificationService NotificationService
@inject NavigationManager NavigationManager

@using ByTescaro.ConstrutorApp.Application.Utils
@using ByTescaro.ConstrutorApp.Application.DTOs
@using ByTescaro.ConstrutorApp.UI.Services
@using Microsoft.AspNetCore.Components.Forms
@using Radzen

<RadzenCard Style="max-width: 1300px; margin: auto; padding: 2rem;">
    <RadzenHeading Size="H4" Text="Importador de Funcionários" />

    <!-- Upload Excel -->
    <div class="rz-mb-4" style="display: flex; gap: 1rem; align-items: center;">
        <div style="position: relative; display: inline-block;">
            <RadzenButton Text="Selecionar Excel"
                          Icon="upload"
                          ButtonStyle="ButtonStyle.Primary"
                          class="rz-button-md rz-button-solid"
                          style="pointer-events: none; opacity: 1; position: relative; z-index: 1;" />
            <InputFile OnChange="OnFileSelected"
                       accept=".xlsx,.xls"
                       style="position: absolute; width: 100%; height: 100%; top: 0; left: 0; opacity: 0; cursor: pointer; z-index: 2;" />
        </div>



        <RadzenButton Text="Modelo de Importação"
                      Icon="file_download"
                      ButtonStyle="ButtonStyle.Secondary"
                      Click="@DownloadModeloImportacao" />
    </div>

@*     <RadzenFieldset Text="Atenção" Style="margin-bottom: 1.5rem">
        <RadzenRow Class="rz-p-4" Style="row-gap: 1rem;">
            <RadzenColumn Size="6" SizeMD="6">
                <RadzenText TextStyle="TextStyle.Body1" wid="3">
                    <p>
                        <strong>Na coluna TipoPessoa:</strong>
                        <ul>
                            <li>Coloque <strong>1</strong> para <strong>Pessoa Física</strong></li>
                            <li>Coloque <strong>2</strong> para <strong>Pessoa Jurídica</strong></li>
                        </ul>
                    </p>
                </RadzenText>

            </RadzenColumn>
        </RadzenRow>
    </RadzenFieldset> *@


    <!-- Preview Editável -->
    @if (funcionariosPreview?.Any() == true)
    {
        <RadzenDataGrid TItem="FuncionarioDto" Data="@funcionariosPreview" @ref="grid" Editable="true" EditMode="DataGridEditMode.Single" AllowFiltering="true"
                        AllowColumnResize="true"
                        AllowSorting="true"
                        PageSize="10"
                        AllowPaging="true"
                        PagerHorizontalAlign="HorizontalAlign.Left"
                        ShowPagingSummary="true"
                        FilterMode="FilterMode.Advanced"
                        Responsive="true"
                        EmptyText="Não contém registros."
                        ColumnWidth="250px">
            <Columns>
                <RadzenDataGridColumn TItem="FuncionarioDto" Property="Nome" Title="Nome" />
                <RadzenDataGridColumn TItem="FuncionarioDto" Title="Tipo de Pessoa">
                    <Template Context="e">
                        @EnumHelper.ObterDescricaoEnum(e.TipoPessoa)
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="FuncionarioDto" Property="CpfCnpj" Title="CNPJ/CPF" />
                <RadzenDataGridColumn TItem="FuncionarioDto" Property="TelefonePrincipal" Title="Telefone Principal" />
                <RadzenDataGridColumn TItem="FuncionarioDto" Property="TelefoneWhatsApp" Title="Telefone WhastApp" />
                <RadzenDataGridColumn TItem="FuncionarioDto" Property="Email" Title="Email" />
                <RadzenDataGridColumn TItem="FuncionarioDto" Property="CEP" Title="CEP" />
                <RadzenDataGridColumn TItem="FuncionarioDto" Property="Logradouro" Title="Logradouro" />
                <RadzenDataGridColumn TItem="FuncionarioDto" Property="Numero" Title="Número" />
                <RadzenDataGridColumn TItem="FuncionarioDto" Property="Bairro" Title="Bairro" />
                <RadzenDataGridColumn TItem="FuncionarioDto" Property="Complemento" Title="Complemento" />
                <RadzenDataGridColumn TItem="FuncionarioDto" Property="Cidade" Title="Cidade" />
                <RadzenDataGridColumn TItem="FuncionarioDto" Property="Estado" Title="Estado" />
                <RadzenDataGridColumn TItem="FuncionarioDto" Property="UF" Title="UF" />

                <RadzenDataGridColumn TItem="FuncionarioDto">
                    <Template Context="funcionario">
                        <RadzenButton Icon="edit" Size="ButtonSize.Small" Click="() => grid.EditRow(funcionario)" Text="Editar" />
                    </Template>
                    <EditTemplate Context="funcionario">
                        <RadzenButton Icon="check" Size="ButtonSize.Small" Click="() => grid.UpdateRow(funcionario)" Text="Salvar" />
                        <RadzenButton Icon="close" Size="ButtonSize.Small" Click="() => grid.CancelEditRow(funcionario)" Text="Cancelar" />
                    </EditTemplate>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>

        <RadzenButton Text="Importar"
                      Style="margin-top: 1.5rem"
                      Icon="upload"
                      ButtonStyle="ButtonStyle.Primary"
                      Click="@Importar" />
    }

    <!-- Lista de Erros -->
    @if (errosImportacao?.Any() == true)
    {
        <RadzenPanel Text="Erros encontrados durante a importação" Style="margin-top:2rem;">
            <ul>
                @foreach (var erro in errosImportacao)
                {
                    <li><b>@erro.Referencia:</b> @erro.Mensagem</li>
                }
            </ul>
        </RadzenPanel>
    }
</RadzenCard>

@code {
    private List<FuncionarioDto> funcionariosPreview = new();
    private List<ErroImportacaoDto> errosImportacao = new();
    private RadzenDataGrid<FuncionarioDto>? grid;

    async Task OnFileSelected(InputFileChangeEventArgs args)
    {
        try
        {
            var file = args.File;
            if (file == null)
            {
                NotificationService.Notify(NotificationSeverity.Warning, "Atenção", "Nenhum arquivo selecionado.");
                return;
            }

            using var stream = file.OpenReadStream();
            funcionariosPreview = await ImportacaoService.PreviewExcelFuncionariosAsync(stream, file.Name);

            NotificationService.Notify(NotificationSeverity.Success, "Pré-visualização pronta", "Dados carregados com sucesso.");
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Erro", ex.Message);
        }
    }

    async Task Importar()
    {
        try
        {
            errosImportacao = await ImportacaoService.ImportarFuncionariosAsync(funcionariosPreview);

            if (errosImportacao.Count == 0)
            {
                //     NotificationService.Notify(NotificationSeverity.Success, "Importação concluída", "Todos os funcionarios foram importados.");
                funcionariosPreview.Clear();
                NotificationMessage message = new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Sucesso", Detail = "Todos os funcionarios foram importados!", Duration = 4000 };
                NotificationService.Notify(message);


            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Warning, "Importação parcial", "Alguns funcionarios não foram importados.");
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Erro ao importar", ex.Message);
        }
    }


    private void DownloadModeloImportacao()
    {
        NavigationManager.NavigateTo("/modelos/Modelo_Importacao_Funcionarios.xlsx", true);
    }

}
