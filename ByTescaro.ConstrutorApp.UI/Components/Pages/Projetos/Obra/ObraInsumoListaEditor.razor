@using ByTescaro.ConstrutorApp.Application.DTOs
@using ByTescaro.ConstrutorApp.Domain.Enums
@using ByTescaro.ConstrutorApp.UI.Services
@using System.ComponentModel.DataAnnotations
@using System.Reflection
@using Microsoft.JSInterop

@inject ObraInsumoApiService InsumoService
@inject ObraInsumoListaApiService ListaService
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject IJSRuntime JSRuntime

<RadzenCard Style="padding: 1rem; margin-bottom: 1rem">
    <RadzenRow AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween" Gap="1rem" Class="rz-mb-4">
        <RadzenColumn Size="12" SizeMD="6" Class="rz-mb-2 rz-mb-md-0">
            <RadzenStack Orientation="Orientation.Vertical" Gap="0.25rem">
                <RadzenLabel Text="Data de Envio" />
                <RadzenDatePicker @bind-Value="Lista.Data" Style="width: 100%;" DateFormat="dd/MM/yyyy" />
            </RadzenStack>
        </RadzenColumn>

        <RadzenColumn Size="12" SizeMD="6">
            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" JustifyContent="JustifyContent.End" Wrap="FlexWrap.Wrap">
                <RadzenButton Icon="save"
                              Text="Salvar Alterações"
                              ButtonStyle="ButtonStyle.Primary"
                              Size="ButtonSize.Small"
                              Click="SalvarLista" />

                <RadzenButton Icon="delete"
                              Text="Excluir Lista"
                              ButtonStyle="ButtonStyle.Danger"
                              Size="ButtonSize.Small"
                              Click="ConfirmarRemocaoLista" />
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>

    <RadzenRow Gap="1rem" Class="rz-mb-2">
        <RadzenColumn Size="12" SizeLG="5">
            <RadzenDropDown Data="@InsumosDisponiveis"
                            TextProperty="Nome"
                            ValueProperty="Id"
                            Multiple="true"
                            @bind-Value="_insumosSelecionados"
                            Placeholder="Insumos Disponíveis"
                            Style="width: 100%;" 
                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true" />
        </RadzenColumn>

        <RadzenColumn Size="12" SizeLG="5">
            <RadzenDropDown Data="@InsumosRelacionadosEtapa"
                            TextProperty="Nome"
                            ValueProperty="Id"
                            Multiple="true"
                            @bind-Value="_insumosRelacionadosSelecionados"
                            Placeholder="Insumos por Etapa"
                            Style="width: 100%;"
                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true" />
        </RadzenColumn>

        <RadzenColumn Size="12" SizeLG="2">
            <RadzenNumeric @bind-Value="QuantidadeSelecionada"
                           TValue="decimal"
                           Style="width: 100%;"
                           Min="0.1m"
                           Step="1"
                           Placeholder="Qtd."
                           ShowUpDown="true" />
        </RadzenColumn>
    </RadzenRow>

    <RadzenStack JustifyContent="JustifyContent.Start" Class="rz-mb-4">
        <RadzenButton Text="Atualizar Itens da Lista"
                      Icon="sync"
                      Disabled="@(!_insumosSelecionados.Any() && !_insumosRelacionadosSelecionados.Any())"
                      Click="@AdicionarInsumos" />
    </RadzenStack>

    <RadzenDataGrid @ref="grid" TItem="ObraInsumoDto" Data="@Lista.Itens"
                    Responsive="true"
                    ShowPagingSummary="false" AllowPaging="false" AllowColumnResize="true"
                    AllowSorting="true" PagerHorizontalAlign="HorizontalAlign.Left"
                    Editable="true" EditMode="DataGridEditMode.Single"
                    AutoGenerateColumns="false" Class="rz-mt-2"
                    RowUpdate="@OnRowUpdate"
                    CellClick="@OnCellClick"
                    Sort="@(args => ResetEditingState())"
                    Page="@(args => ResetEditingState())"
                    Filter="@(args => ResetEditingState())">
        <Columns>
            <RadzenDataGridColumn TItem="ObraInsumoDto" Property="InsumoNome" Title="Insumo" />

            <RadzenDataGridColumn TItem="ObraInsumoDto" Property="Quantidade" Title="Quantidade" IsInEditMode="@IsEditing">
                <Template Context="item">
                    <RadzenText Text="@item.Quantidade.ToString("N2")" />
                </Template>
                <EditTemplate Context="item">
                    @* Não precisa do Change handler se o Update é no RowUpdate do grid *@
                    <RadzenNumeric @bind-Value="item.Quantidade" Style="width:100%;" TValue="decimal" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="ObraInsumoDto" Property="UnidadeMedida" Title="Unidade de Medida" Sortable="false">
                <Template Context="item">
                    @ObterNomeUnidade(item.UnidadeMedida)
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="ObraInsumoDto" Property="IsRecebido" Title="Recebido" Width="150px" TextAlign="TextAlign.Center" IsInEditMode="@IsEditing">
                <Template Context="item">
                    <RadzenCheckBox Value="item.IsRecebido" TValue="bool" Disabled="true" />
                </Template>
                <EditTemplate Context="item">
                    @* Não precisa do Change handler se o Update é no RowUpdate do grid *@
                    <RadzenCheckBox @ref="editor" @bind-Value="item.IsRecebido" TValue="bool" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="ObraInsumoDto" Property="DataRecebimento" Title="Data Recebimento" Width="200px" IsInEditMode="@IsEditing">
                <Template Context="item">
                    @item.DataRecebimento?.ToString("dd/MM/yyyy")
                </Template>
                <EditTemplate Context="item">
                    @* Não precisa do Change handler se o Update é no RowUpdate do grid *@
                    <RadzenDatePicker @ref="editor" @bind-Value="item.DataRecebimento" DateFormat="dd/MM/yyyy" Style="width:100%;" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="ObraInsumoDto" Title="" Width="60px" Sortable="false" TextAlign="TextAlign.Center">
                <Template Context="item">
                    <RadzenButton Icon="delete"
                                  ButtonStyle="ButtonStyle.Danger"
                                  Size="ButtonSize.Small"
                                  Click="@(() => ConfirmarRemocaoItem(item))" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</RadzenCard>

@code {
    [Parameter] public ObraInsumoListaDto? Lista { get; set; }
    [Parameter] public ObraDto Obra { get; set; } = new();

    [Parameter] public EventCallback OnListChanged { get; set; }

    private List<InsumoDto> InsumosDisponiveis = new();
    private List<InsumoDto> InsumosRelacionadosEtapa = new();

    private List<long> _insumosSelecionados = new();
    private List<long> _insumosRelacionadosSelecionados = new();

    private decimal QuantidadeSelecionada { get; set; } = 1;

    private List<long> _insumosRemovidos = new();

    RadzenDataGrid<ObraInsumoDto> grid = default!;
    string? columnEditing;
    ObraInsumoDto? itemEditing; // Agora pode ser null
    IRadzenFormComponent? editor; // Usado apenas para o foco
    bool editorFocused;

    protected override async Task OnInitializedAsync()
    {
        Lista ??= new ObraInsumoListaDto
        {
            ObraId = Obra.Id,
            Data = DateOnly.FromDateTime(DateTime.Today),
            Itens = new List<ObraInsumoDto>()
        };

        await LoadInsumosData();
    }

    private async Task LoadInsumosData()
    {
        InsumosDisponiveis = await InsumoService.GetInsumosAsync();

        var relacionadosEtapa = await InsumoService.GetInsumosPadraoRelacionadosAsync(Obra.Id);

        InsumosRelacionadosEtapa = relacionadosEtapa
          .Select(p => new InsumoDto
          {
              Id = p.Id,
              Nome = p.Nome,
              UnidadeMedida = p.UnidadeMedida
          })
          .ToList();
    }

    private async Task SalvarLista()
    {
        ResetEditingState(); // Garante que o estado de edição é limpo ao salvar a lista

        if (Lista is null || Lista.Itens is null || !Lista.Itens.Any())
        {
            NotificationService.Notify(NotificationSeverity.Warning, "Validação", "Adicione ao menos um item à lista.");
            return;
        }

        try
        {
            if (Lista.Id == 0)
            {
                var novaLista = await ListaService.CreateAsync(Lista);
                if (novaLista is not null)
                {
                    Lista = novaLista;
                    NotificationService.Notify(NotificationSeverity.Success, "Sucesso", "Nova lista de insumos criada com sucesso.");
                }
                else
                {
                    NotificationService.Notify(NotificationSeverity.Error, "Erro", "Falha ao criar nova lista.");
                    return;
                }
            }
            else
            {
                foreach (var insumoId in _insumosRemovidos)
                {
                    // Lógica para remover itens do banco de dados (se necessário)
                }
                _insumosRemovidos.Clear();

                await ListaService.UpdateAsync(Lista);
                NotificationService.Notify(NotificationSeverity.Success, "Sucesso", "Lista de insumos atualizada com sucesso.");
            }

            await OnListChanged.InvokeAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Erro", $"Falha ao salvar lista: {ex.Message}");
        }
    }

    private async Task ConfirmarRemocaoItem(ObraInsumoDto item)
    {
        // Se o item que está sendo removido for o item atualmente em edição, resete o estado de edição.
        if (itemEditing == item)
        {
            ResetEditingState();
        }

        bool? confirm = await DialogService.Confirm($"Remover o insumo '{item.InsumoNome}'?", "Confirmação");
        if (confirm == true)
        {
            if (item.Id > 0)
            {
                _insumosRemovidos.Add(item.Id);
            }
            Lista!.Itens.Remove(item);
            NotificationService.Notify(NotificationSeverity.Success, "Item Removido", $"O insumo '{item.InsumoNome}' foi removido da lista localmente. Salve para persistir a alteração.");
            StateHasChanged();
        }
    }

    private async Task ConfirmarRemocaoLista()
    {
        ResetEditingState(); // Garante que o estado de edição é limpo ao remover a lista

        bool? confirm = await DialogService.Confirm($"Excluir a lista de {Lista!.NomeResponsavel}?", "Excluir Lista");
        if (confirm == true)
        {
            if (Lista.Id > 0)
            {
                await ListaService.DeleteAsync(Lista.Id);
                NotificationService.Notify(NotificationSeverity.Success, "Sucesso", "Lista de insumos excluída com sucesso.");
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Info, "Lista Removida", "A lista não salva foi descartada.");
            }

            await OnListChanged.InvokeAsync();
        }
    }

    private async Task AdicionarInsumos()
    {
        ResetEditingState();

        Lista!.Itens ??= new();

        var todosSelecionados = _insumosSelecionados
          .Concat(_insumosRelacionadosSelecionados)
          .Distinct()
          .ToList();

        var baseAtualizada = Lista.Itens
          .Where(i => !_insumosRemovidos.Contains(i.InsumoId))
          .ToList();

        foreach (var id in todosSelecionados)
        {
            var existingItem = baseAtualizada.FirstOrDefault(i => i.InsumoId == id);
            if (existingItem == null)
            {
                var insumo = InsumosDisponiveis.Concat(InsumosRelacionadosEtapa)
                  .FirstOrDefault(i => i.Id == id);

                if (insumo is not null)
                {
                    baseAtualizada.Add(new ObraInsumoDto
                    {
                        ObraInsumoListaId = Lista.Id,
                        InsumoId = insumo.Id,
                        InsumoNome = insumo.Nome,
                        UnidadeMedida = insumo.UnidadeMedida,
                        Quantidade = QuantidadeSelecionada,
                        IsRecebido = false,
                        DataRecebimento = null,
                        ObraId = Obra.Id
                    });
                }
            }
            else
            {
                if (_insumosRemovidos.Contains(existingItem.Id))
                {
                    _insumosRemovidos.Remove(existingItem.Id);
                }
            }
        }

        Lista.Itens = baseAtualizada;

        _insumosSelecionados.Clear();
        _insumosRelacionadosSelecionados.Clear();
        QuantidadeSelecionada = 1;

        if (Lista.Id > 0)
        {
            try
            {
                await ListaService.UpdateAsync(Lista);
                NotificationService.Notify(NotificationSeverity.Success, "Atualizado", "Itens adicionados e salvos com sucesso.");
            }
            catch (Exception ex)
            {
                NotificationService.Notify(NotificationSeverity.Error, "Erro", $"Erro ao atualizar itens da lista: {ex.Message}");
            }
        }
        else
        {
            NotificationService.Notify(NotificationSeverity.Info, "Itens Adicionados", "Itens adicionados à nova lista. Salve a lista para persistir.");
        }

        StateHasChanged();
    }

    // Este método verifica se a célula da coluna especificada para o item está em modo de edição.
    // É usado pela propriedade IsInEditMode de cada RadzenDataGridColumn editável.
    bool IsEditing(string columnName, ObraInsumoDto item)
    {
        return columnEditing == columnName && itemEditing == item;
    }

    // Reseta o estado de edição atual do grid.
    // Renomeado de Reset() para ResetEditingState() para clareza e para evitar confusão com o antigo Update().
    void ResetEditingState()
    {
        editorFocused = false;
        columnEditing = null;
        itemEditing = null;
    }

    // Este evento é disparado quando uma célula do grid é clicada.
    // Ele inicia o modo de edição para a célula clicada, se for editável.
    async Task OnCellClick(DataGridCellMouseEventArgs<ObraInsumoDto> args)
    {
        // Define quais colunas NÃO devem ser editáveis ao clicar na célula.
        var nonEditableProperties = new HashSet<string> { "InsumoNome", "UnidadeMedida", "" };

        if (!grid.IsValid ||
            (itemEditing == args.Data && columnEditing == args.Column.Property) ||
            nonEditableProperties.Contains(args.Column.Property))
        {
            return;
        }

        // Se houver um item (linha) que estava sendo editado anteriormente (e não é o mesmo item clicado),
        // força o RadzenDataGrid a sair do modo de edição para aquela linha/célula.
        // O RowUpdate do grid será disparado neste momento.
        if (itemEditing != null && itemEditing != args.Data)
        {
            await grid.UpdateRow(itemEditing);
            // ResetEditingState() não é chamado imediatamente aqui. O RowUpdate fará isso.
        }

        // Define a coluna e o item que agora estão em modo de edição.
        columnEditing = args.Column.Property;
        itemEditing = args.Data;

        // Diz ao RadzenDataGrid para colocar a linha do item clicado em modo de edição.
        await grid.EditRow(itemEditing);

        // Reseta a flag de foco do editor para que o novo editor possa ser focado.
        editorFocused = false;
        StateHasChanged(); // Força a re-renderização do componente para aplicar o modo de edição.
    }

    // Este método é o handler para o evento RowUpdate do RadzenDataGrid.
    // Ele é chamado quando uma linha editada sai do modo de edição (ex: usuário clica fora da linha).
    async Task OnRowUpdate(ObraInsumoDto item) // O Radzen passa o item editado aqui
    {
        // As propriedades do 'item' já foram atualizadas na coleção 'Lista.Itens'
        // devido ao two-way binding (@bind-Value) nos EditTemplates.
        // Você pode adicionar validações aqui se quiser.

        // Notifique que a alteração foi aplicada localmente. O salvamento para o banco
        // de dados ocorre no método SalvarLista(), quando o botão "Salvar Alterações" é clicado.
        NotificationService.Notify(NotificationSeverity.Info, "Alteração Local", $"Item '{item.InsumoNome}' atualizado localmente. Salve a lista para persistir.");

        // IMPORTANTE: Resete o estado de edição APÓS o RowUpdate ter sido processado.
        // Este é o ponto onde o itemEditing pode ser seguramente zerado.
        ResetEditingState(); // Agora este é o único local onde Reset é chamado após uma edição de linha.
    }


    // Garante que o componente de edição (`editor`) receba o foco após ser renderizado,
    // melhorando a usabilidade.
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (!editorFocused && editor != null)
        {
            editorFocused = true;
            try
            {
                await editor.FocusAsync();
            }
            catch (Exception ex)
            {
                // Ignorar exceções de foco, que podem ocorrer se o componente for removido do DOM rapidamente
                Console.WriteLine($"Erro ao focar editor: {ex.Message}");
            }
        }
    }

    private static string ObterNomeUnidade(UnidadeMedida? unidade)
    {
        if (unidade is null) return "";
        var member = unidade.Value.GetType().GetMember(unidade.ToString() ?? "").FirstOrDefault();
        var display = member?.GetCustomAttribute<DisplayAttribute>();
        return display?.Name ?? unidade.ToString();
    }
}