@page "/fornecedor/novo"
@page "/fornecedor/editar/{Id:long}"

@using ByTescaro.ConstrutorApp.Application.DTOs
@using ByTescaro.ConstrutorApp.Domain.Enums
@using ByTescaro.ConstrutorApp.Application.Utils
@using ByTescaro.ConstrutorApp.UI.Services
@using Microsoft.AspNetCore.Authorization
@inject FornecedorApiService FornecedorApiService
@inject NavigationManager Navigation
@inject NotificationService NotificationService
@attribute [Authorize]

<PageTitle>Fornecedor</PageTitle>

<RadzenCard Class="rz-mt-5 rz-p-4 rz-shadow-md rz-rounded-md rz-mx-auto" Style="max-width: 1300px; width: 100%;">
    <RadzenTemplateForm TItem="FornecedorDto" Data="@fornecedor" Submit="Salvar" InvalidSubmit="ExibirErros">
        <RadzenHeading Size="H4" Text="@(Id == 0 ? "Novo Fornecedor" : "Editar Fornecedor")" Class="rz-mb-3" />

        <RadzenFieldset Text="Dados do Fornecedor" Style="margin-bottom: 1.5rem">
            <RadzenRow>
                <RadzenColumn Size="12" SizeMD="4">
                    <RadzenLabel Text="Nome *" />
                    <RadzenTextBox @bind-Value="fornecedor.Nome" Name="Nome" Style="width: 100%;" />
                    <RadzenRequiredValidator Component="Nome" Text="Nome obrigatório" />
                </RadzenColumn>

                <RadzenColumn Size="12" SizeMD="3">
                    <RadzenLabel Text="Tipo de Fornecedor *" />
                    <RadzenDropDown @bind-Value="fornecedor.TipoFornecedor"
                                    TValue="TipoFornecedor?"
                                    Data="@tipoFornecedorOptions"
                                    TextProperty="Label"
                                    ValueProperty="Value"
                                    Name="Tipo"
                                    Style="width: 100%;" />
                    <RadzenRequiredValidator Component="Tipo" Text="Obrigatório" />
                </RadzenColumn>

                <RadzenColumn Size="12" SizeMD="2">
                    <RadzenLabel Text="Tipo de Pessoa *" />
                    <RadzenDropDown @bind-Value="fornecedor.TipoPessoa"
                                    TValue="TipoPessoa?"
                                    Data="@tipoPessoaOptions"
                                    TextProperty="Label"
                                    ValueProperty="Value"
                                    Name="TipoPessoa"
                                    Style="width: 100%;" />
                    <RadzenRequiredValidator Component="TipoPessoa" Text="Obrigatório" />
                </RadzenColumn>

                <RadzenColumn Size="12" SizeMD="3">
                    <RadzenLabel Text="CPF/CNPJ *" />
                    <RadzenMask @bind-Value="fornecedor.CpfCnpj"
                                Mask="**.***.***/****-**"
                                CharacterPattern="[0-9]"
                                Placeholder="00.000.000/0000-00"
                                Name="CpfCnpj"
                                Style="width: 100%;" />
                    <RadzenRequiredValidator Component="CpfCnpj" Text="Obrigatório" />
                </RadzenColumn>
            </RadzenRow>
        </RadzenFieldset>

        <RadzenFieldset Text="Contato" Style="margin-bottom: 1.5rem">
            <RadzenRow>
                <RadzenColumn Size="12" SizeMD="4">
                    <RadzenLabel Text="Telefone Principal" />
                    <RadzenMask @bind-Value="fornecedor.TelefonePrincipal"
                                Mask="(**) *****-****"
                                CharacterPattern="[0-9]"
                                Placeholder="(00) 00000-0000"
                                Name="Telefone"
                                Style="width: 100%;" />
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="4">
                    <RadzenLabel Text="WhatsApp" />
                    <RadzenMask @bind-Value="fornecedor.TelefoneWhatsApp"
                                Mask="(**) *****-****"
                                CharacterPattern="[0-9]"
                                Placeholder="(00) 00000-0000"
                                Name="WhatsApp"
                                Style="width: 100%;" />
                </RadzenColumn>

                <RadzenColumn Size="12" SizeMD="4">
                    <RadzenLabel Text="Email" />
                    <RadzenTextBox @bind-Value="fornecedor.Email" Name="Email" Style="width: 100%;" />
                </RadzenColumn>
            </RadzenRow>
        </RadzenFieldset>

        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="1rem" Class="rz-mt-3">
            <RadzenButton Text="Cancelar" ButtonStyle="ButtonStyle.Light" Click="@Cancelar" />
            <RadzenButton Text="Salvar" ButtonType="ButtonType.Submit" Icon="save" Style="min-width: 120px;" />
        </RadzenStack>
    </RadzenTemplateForm>
</RadzenCard>

@code {
    [Parameter] public long Id { get; set; }

    private FornecedorDto fornecedor = new();
    private FornecedorDto _originalFornecedorDto = new();

    private List<EnumOption<TipoPessoa>> tipoPessoaOptions = EnumHelper.ListarOpcoes<TipoPessoa>(incluirNulo: true);

    private List<EnumOption<TipoFornecedor>> tipoFornecedorOptions = EnumHelper.ListarOpcoes<TipoFornecedor>(incluirNulo: true);

    protected override async Task OnInitializedAsync()
    {
        if (Id != 0)
        {
            var existente = await FornecedorApiService.GetByIdAsync(Id);
            if (existente is not null)
            {
                fornecedor = existente;
                _originalFornecedorDto = fornecedor.Clone();
            }
        }
    }

    private async Task Salvar(FornecedorDto model)
    {// 1. Executa todas as validações customizadas
        var validationErrors = await ValidateFornecedorForm(model);


        if (validationErrors.Any())
        {
            foreach (var error in validationErrors)
            {
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Erro de Validação", Detail = error, Duration = 5000 });
            }
            return; // Impede a submissão se houver erros de validação
        }

        // 2. Chama o serviço para persistir os dados
        try
        {
            if (model.Id == 0)
            {
                await FornecedorApiService.CreateAsync(model);
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Sucesso", Detail = "Fornecedor cadastrado com sucesso!", Duration = 4000 });
            }
            else
            {
                await FornecedorApiService.UpdateAsync(model);
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Sucesso", Detail = "Fornecedor atualizado com sucesso!", Duration = 4000 });
            }

            Navigation.NavigateTo("/fornecedores");
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Erro", Detail = $"Erro ao salvar fornecedor: {ex.Message}", Duration = 5000 });
        }
    }

    // Método auxiliar para consolidar todas as validações personalizadas
    private async Task<List<string>> ValidateFornecedorForm(FornecedorDto model)
    {
        var errors = new List<string>();

        // 1. Validação do Tipo de Pessoa
        if (!model.TipoPessoa.HasValue)
        {
            errors.Add("Tipo de Pessoa é obrigatório.");
        }

        // Limpa os campos de contato para validação de duplicidade, se necessário
        // Se o DTO já está recebendo eles limpos da UI, pode pular
        model.TelefonePrincipal = model.TelefonePrincipal != null ? new string(model.TelefonePrincipal.Where(char.IsDigit).ToArray()) : string.Empty;
        model.TelefoneWhatsApp = model.TelefoneWhatsApp != null ? new string(model.TelefoneWhatsApp.Where(char.IsDigit).ToArray()) : string.Empty;

        // 2. Validação de Formato e Algoritmo do CPF/CNPJ
        if (!string.IsNullOrWhiteSpace(model.CpfCnpj) && model.TipoPessoa.HasValue)
        {
            string? CpfCnpj = model.CpfCnpj;
            // model.CpfCnpj = model.CpfCnpj != null ? new string(model.CpfCnpj.Where(char.IsDigit).ToArray()) : string.Empty;

            if (!CpfCnpjValidator.IsCpfCnpjValid(model.CpfCnpj, model.TipoPessoa))
            {
                errors.Add("CPF/CNPJ inválido para o tipo de pessoa selecionado.");
            }

            model.CpfCnpj = CpfCnpj;

        }
        // else if (string.IsNullOrWhiteSpace(model.CpfCnpj)) { /* O RadzenRequiredValidator lida com isso */ }

        // Obter o ID a ignorar para validações de duplicidade (para o próprio registro em edição)
        long? ignoreId = model.Id != 0 ? model.Id : (long?)null;

        // 3. Validação de Duplicidade do CPF/CNPJ
        // Só verifica duplicidade se o CPF/CNPJ está preenchido e se não houver erros de formato prévios.
        if (!string.IsNullOrWhiteSpace(model.CpfCnpj))
        {
            string originalCpfCnpj = _originalFornecedorDto != null && !string.IsNullOrWhiteSpace(_originalFornecedorDto.CpfCnpj)
                                            ? _originalFornecedorDto.CpfCnpj
                                            : string.Empty;

            bool cpfCnpjChanged = (model.Id == 0) || (model.CpfCnpj != originalCpfCnpj);

            if (cpfCnpjChanged)
            {
                bool cpfCnpjAlreadyExists = await FornecedorApiService.CpfCnpjExistsAsync(model.CpfCnpj, ignoreId);
                if (cpfCnpjAlreadyExists)
                {
                    errors.Add("CPF/CNPJ já cadastrado para outro fornecedor.");
                }
            }
        }

        // 4. Validação de Duplicidade de Telefone Principal
        if (!string.IsNullOrWhiteSpace(model.TelefonePrincipal))
        {
            string originalTelefonePrincipal = _originalFornecedorDto != null && !string.IsNullOrWhiteSpace(_originalFornecedorDto.TelefonePrincipal)
                                                        ? _originalFornecedorDto.TelefonePrincipal
                                                        : string.Empty;

            bool telefonePrincipalChanged = (model.Id == 0) || (model.TelefonePrincipal != originalTelefonePrincipal);

            if (telefonePrincipalChanged)
            {
                bool telefonePrincipalAlreadyExists = await FornecedorApiService.TelefonePrincipalExistsAsync(model.TelefonePrincipal, ignoreId);
                if (telefonePrincipalAlreadyExists)
                {
                    errors.Add("Telefone Principal já cadastrado para outro fornecedor.");
                }
            }
        }

        // 5. Validação de Duplicidade de Telefone WhatsApp
        if (!string.IsNullOrWhiteSpace(model.TelefoneWhatsApp))
        {
            string originalTelefoneWhatsApp = _originalFornecedorDto != null && !string.IsNullOrWhiteSpace(_originalFornecedorDto.TelefoneWhatsApp)
                                                        ? _originalFornecedorDto.TelefoneWhatsApp
                                                        : string.Empty;

            bool telefoneWhatsAppChanged = (model.Id == 0) || (model.TelefoneWhatsApp != originalTelefoneWhatsApp);

            if (telefoneWhatsAppChanged)
            {
                bool telefoneWhatsAppAlreadyExists = await FornecedorApiService.TelefoneWhatsAppExistsAsync(model.TelefoneWhatsApp, ignoreId);
                if (telefoneWhatsAppAlreadyExists)
                {
                    errors.Add("WhatsApp já cadastrado para outro fornecedor.");
                }
            }
        }

        // 6. Validação de Duplicidade de Email
        if (!string.IsNullOrWhiteSpace(model.Email))
        {
            string originalEmail = _originalFornecedorDto?.Email ?? string.Empty;
            bool emailChanged = (model.Id == 0) || (model.Email != originalEmail);

            if (emailChanged)
            {
                bool emailAlreadyExists = await FornecedorApiService.EmailExistsAsync(model.Email, ignoreId);
                if (emailAlreadyExists)
                {
                    errors.Add("Email já cadastrado para outro fornecedor.");
                }
            }
        }

        return errors;
    }

    private void ExibirErros()
    {
        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Atenção", Detail = "Existem erros de validação no formulário.", Duration = 4000 });
    }

    private void Cancelar()
    {
        Navigation.NavigateTo("/fornecedores");
    }
}
