@layout LayoutVazio
@page "/Account/Login"
@rendermode InteractiveServer

@using System.ComponentModel.DataAnnotations
@using ByTescaro.ConstrutorApp.Application.DTOs
@using ByTescaro.ConstrutorApp.UI.Services
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject PersonalizacaoApiService PersonalizacaoApiService

<HeadContent>
    <link href="css/app.css" rel="stylesheet" />
    <style>
        .rz-body {
            margin: 0 !important;
            padding: 0 !important;
        }

        .login-page-container {
            display: flex;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
            width: 100%;
            padding: 5vw;
            box-sizing: border-box;
            position: relative;
        }

        .login-background {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            object-fit: cover;
            z-index: -1;
        }

        .login-card {
            background: rgba(255, 255, 255, 0.95);
            padding: 1.5rem;
            border-radius: 10px;
            box-shadow: 0 0 20px rgba(0,0,0,0.3);
            width: 100%;
            max-width: 400px;
            box-sizing: border-box;
        }

        .RadzenHeading {
            font-size: 1.5rem !important;
        }

        .error-message {
            color: red;
            margin-top: 1rem;
            padding: 0.5rem;
            background-color: #ffe5e5;
            border: 1px solid red;
            border-radius: 5px;
        }
    </style>
</HeadContent>


<PageTitle>Entrar no @personalizacao?.NomeEmpresa</PageTitle>

<div class="login-page-container">
    @if (!string.IsNullOrEmpty(personalizacao?.ImagemFundoLoginUrl))
    {
        <RadzenImage Path="@personalizacao.ImagemFundoLoginUrl"
                     class="login-background"
                     AlternateText="Background" />
    }
    else
    {
        <div class="login-background" style="background-color: #f0f0f0;"></div>
    }

    <div class="login-card">
        <form method="post" action="/auth/login">
            <RadzenHeading Size="H4" Text="Use sua conta para acessar o sistema." Style="margin-bottom: 1rem;" />

            <RadzenFieldset Style="border: none;">
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="error-message">@errorMessage</div>
                }

                <RadzenTextBox Name="Email"
                               Placeholder="exemplo@empresa.com"
                               Style="width:100%; margin-bottom: 1rem"
                               Type="email"
                               Required="true"
                               RequiredValidatorText="Informe o e-mail" />

                <RadzenPassword Name="Senha"
                                Placeholder="Digite sua senha"
                                Style="width:100%; margin-bottom: 1rem"
                                Required="true"
                                RequiredValidatorText="Informe a senha" />

                <div style="margin-bottom: 1rem;">
                    <RadzenCheckBox Name="RememberMe" TValue="bool" />
                    <label for="RememberMe" style="margin-left: 0.5rem">Lembrar login</label>
                </div>

                <input type="hidden" name="ReturnUrl" value="@ReturnUrl" />

                <RadzenButton ButtonType="ButtonType.Submit"
                              Text="Entrar"
                              Style="width:100%; margin-top: 1rem"
                              Icon="login"
                              ButtonStyle="ButtonStyle.Primary" />
            </RadzenFieldset>
        </form>
    </div>
</div>

@code {
    private PersonalizacaoDto? personalizacao;
    private string? errorMessage;
    private bool _shouldRedirect;

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [SupplyParameterFromQuery(Name = "errorMessage")]
    private string? ErrorMessageFromUrl { get; set; }


    protected override async Task OnInitializedAsync()
    {
        personalizacao = await PersonalizacaoApiService.ObterAsync();

        // Atribui a mensagem da URL para a variável do componente
        if (!string.IsNullOrEmpty(ErrorMessageFromUrl))
        {
            errorMessage = ErrorMessageFromUrl;
        }
    }
}