@page "/perfilUsuario/novo"
@page "/perfilUsuario/editar/{Id:long}"

@using ByTescaro.ConstrutorApp.Application.DTOs
@using ByTescaro.ConstrutorApp.UI.Services
@using Microsoft.AspNetCore.Authorization
@inject PerfilUsuarioApiService PerfilUsuarioApiService
@inject NavigationManager Navigation
@inject NotificationService NotificationService
@attribute [Authorize]

<PageTitle>Perfil de Usuário</PageTitle>

<RadzenCard Class="rz-mt-5 rz-p-4 rz-shadow-md rz-rounded-md rz-mx-auto" Style="max-width: 1300px; width: 100%;">
    <RadzenTemplateForm TItem="PerfilUsuarioDto" Data="@perfilUsuario" Submit="Salvar" InvalidSubmit="ExibirErros">
        <RadzenHeading Size="H4" Text="@(Id == 0 ? "Novo Perfil de Usuário" : "Editar Perfil de Usuário")" Class="rz-mb-3" />

        <RadzenFieldset Text="Dados do Perfil" Style="margin-bottom: 1.5rem;">
            <RadzenRow>
                <RadzenColumn Size="12" SizeMD="6">
                    <RadzenLabel Text="Nome" />
                    <RadzenTextBox @bind-Value="perfilUsuario.Nome" Name="Nome" Style="width: 100%;" />
                    <RadzenRequiredValidator Component="Nome" Text="O nome é obrigatório" />
                </RadzenColumn>
            </RadzenRow>
        </RadzenFieldset>

        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="1rem" Class="rz-mt-3">
            <RadzenButton Text="Cancelar" ButtonStyle="ButtonStyle.Light" Click="@Cancelar" />
            <RadzenButton Text="Salvar" ButtonType="ButtonType.Submit" Icon="save" Style="min-width: 120px;" />
        </RadzenStack>
    </RadzenTemplateForm>
</RadzenCard>

@code {
    [Parameter] public long Id { get; set; }

    private PerfilUsuarioDto perfilUsuario = new();

    protected override async Task OnInitializedAsync()
    {
        if (Id != 0)
        {
            var existente = await PerfilUsuarioApiService.GetByIdAsync(Id);
            if (existente is not null)
                perfilUsuario = existente;
        }
    }

    private async Task Salvar(PerfilUsuarioDto model)
    {
        try
        {
            if (model.Id == 0)
            {
                await PerfilUsuarioApiService.CreateAsync(model);
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Sucesso",
                        Detail = "Perfil cadastrado com sucesso!",
                        Duration = 4000
                    });
            }
            else
            {
                await PerfilUsuarioApiService.UpdateAsync(model);
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Sucesso",
                        Detail = "Perfil atualizado com sucesso!",
                        Duration = 4000
                    });
            }

            Navigation.NavigateTo("/perfilUsuarios");
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Erro",
                    Detail = $"Erro ao salvar perfil: {ex.Message}",
                    Duration = 5000
                });
        }
    }

    private void ExibirErros()
    {
        NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Warning,
                Summary = "Atenção",
                Detail = "Existem erros de validação no formulário.",
                Duration = 4000
            });
    }

    private void Cancelar() => Navigation.NavigateTo("/perfilUsuarios");
}
