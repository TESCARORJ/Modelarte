@using ByTescaro.ConstrutorApp.Application.DTOs
@using ByTescaro.ConstrutorApp.Application.Interfaces
@using ByTescaro.ConstrutorApp.Domain.Enums
@using ByTescaro.ConstrutorApp.UI.Services
@using Radzen
@using Radzen.Blazor
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using ByTescaro.ConstrutorApp.Application.Utils


@inject IAgendaService AgendaService
@inject UsuarioApiService UsuarioApiService
@inject IUsuarioLogadoService UsuarioLogadoService
@inject DialogService DialogService
@inject NotificationService NotificationService

<RadzenStack Orientation="Orientation.Vertical" Gap="1rem" Style="padding: 1rem;">
    <RadzenText Text="Criar Novo Evento" TextStyle="TextStyle.H5" />
    @if (editContext != null)
    {
        <EditForm EditContext="@editContext" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <RadzenFieldset Text="Detalhes do Evento">
                <RadzenStack Orientation="Orientation.Vertical" Gap="0.5rem">
                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenLabel Text="Título:" Component="Titulo" />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="8">
                            <RadzenTextBox @bind-Value="eventoRequest.Titulo" Style="width:100%;" Name="Titulo" />
                        </RadzenColumn>
                    </RadzenRow>
                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenLabel Text="Descrição:" Component="Descricao" />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="8">
                            <RadzenTextArea @bind-Value="eventoRequest.Descricao" Style="width:100%;" Name="Descricao" />
                            @* REMOVIDO: RadzenLengthValidator Component="Descricao" *@
                        </RadzenColumn>
                    </RadzenRow>
                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenLabel Text="Início:" Component="DataHoraInicio" />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="8">
                            <RadzenDatePicker @bind-Value="eventoRequest.DataHoraInicio" ShowTime="true" DateFormat="dd/MM/yyyy HH:mm"
                                              Style="width:100%;" Name="DataHoraInicio" />
                            @* REMOVIDO: RadzenRequiredValidator Component="DataHoraInicio" *@
                        </RadzenColumn>
                    </RadzenRow>
                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenLabel Text="Término:" Component="DataHoraFim" />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="8">
                            <RadzenDatePicker @bind-Value="eventoRequest.DataHoraFim" ShowTime="true" DateFormat="dd/MM/yyyy HH:mm"
                                              Style="width:100%;" Name="DataHoraFim" />
                        </RadzenColumn>
                    </RadzenRow>
                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenLabel Text="Visibilidade:" Component="Visibilidade" />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="8">
                            <RadzenDropDown @bind-Value="eventoRequest.Visibilidade" Data="@VisibilidadeList"
                                            TextProperty="Label" ValueProperty="Value"
                                            Style="width:100%;" Name="Visibilidade" />
                            @* REMOVIDO: Nenhuma validação para o DropDown de Visibilidade (se o tipo for nullable, pode precisar de validação customizada) *@
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenStack>
            </RadzenFieldset>

            <RadzenFieldset Text="Participantes (Convidados)" Class="rz-mt-3">
                <RadzenStack Orientation="Orientation.Vertical" Gap="0.5rem">
                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenLabel Text="Selecionar Usuários:" Component="Participantes" />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="8">
                            <RadzenDropDown @bind-Value="eventoRequest.IdsParticipantesConvidados" Data="@usuariosDisponiveis"
                                            TextProperty="Nome" ValueProperty="Id" Multiple="true"
                                            AllowClear="true" Style="width:100%;" Name="Participantes">
                                <Template Context="userContext">
                                    <div>
                                        <strong>@((string)userContext.Nome)</strong> - @((string)userContext.TelefoneWhatsApp )
                                    </div>
                                </Template>
                            </RadzenDropDown>

                          @if (usuariosDisponiveis != null && !usuariosDisponiveis.Any())
                            {
                                <RadzenText Text="Nenhum usuário disponível para convite (após filtro)." TextStyle="TextStyle.Caption" Class="rz-color-info rz-mt-2" />
                            }
                            
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenStack>
            </RadzenFieldset>

            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0.5rem" Class="rz-mt-3">
                <RadzenButton ButtonType="ButtonType.Submit" Text="Criar Evento" Icon="add" Variant="Variant.Flat" />
                <RadzenButton ButtonStyle="ButtonStyle.Light" Text="Cancelar" Click="@OnCancel" Variant="Variant.Flat" />
            </RadzenStack>
        </EditForm>
    }
    else
    {
        <RadzenText Text="Carregando formulário..." TextStyle="TextStyle.Body1" />
    }
</RadzenStack>

@code {
    [Parameter]
    public CriarEventoRequest EventoInicial { get; set; }

    private CriarEventoRequest eventoRequest;
    private EditContext? editContext;
    private IEnumerable<UsuarioDto> usuariosDisponiveis = new List<UsuarioDto>();
    private long usuarioLogadoId;
    private List<EnumOption<Visibilidade>> VisibilidadeList = EnumHelper.ListarOpcoes<Visibilidade>(incluirNulo: true);

    protected override async Task OnInitializedAsync()
    {
        eventoRequest = EventoInicial ?? new CriarEventoRequest();
        editContext = new EditContext(eventoRequest);

        var usuario = await UsuarioLogadoService.ObterUsuarioAtualAsync();
        if (usuario != null)
        {
            usuarioLogadoId = usuario.Id;
            try
            {
                var allUsers = await UsuarioApiService.GetAllAsync();
                usuariosDisponiveis = allUsers?.Where(u => u.Id != usuarioLogadoId).ToList() ?? new List<UsuarioDto>();
            }
            catch (Exception ex)
            {
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Erro ao carregar usuários", Detail = $"Não foi possível carregar a lista de usuários: {ex.Message}" });
                usuariosDisponiveis = new List<UsuarioDto>();
            }
        }
        else
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Erro", Detail = "Usuário não autenticado." });
            DialogService.Close(false);
        }
    }

    private async Task HandleValidSubmit()
    {
        // NOVO: Executa validações customizadas
        var validationErrors = await ValidateEventoForm(eventoRequest);

        if (validationErrors.Any())
        {
            foreach (var error in validationErrors)
            {
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Erro de Validação", Detail = error });
            }
            return; // Impede a submissão se houver erros de validação
        }

        // Se não houver erros de validação customizada, prossegue com o salvamento
        try
        {
            await AgendaService.CriarEventoAsync(eventoRequest, usuarioLogadoId);
            DialogService.Close(true); // Indica sucesso
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Erro ao criar evento", Detail = ex.Message });
            DialogService.Close(false); // Indica falha
        }
    }

    // NOVO: Método auxiliar para consolidar todas as validações personalizadas
    private async Task<List<string>> ValidateEventoForm(CriarEventoRequest model)
    {
        var errors = new List<string>();

        // Validação de Campos Obrigatórios
        if (string.IsNullOrWhiteSpace(model.Titulo))
        {
            errors.Add("O Título do evento é obrigatório.");
        }
        if (model.DataHoraInicio == default(DateTime))
        {
            errors.Add("A Data e Hora de Início são obrigatórias.");
        }
        if (model.DataHoraFim == default(DateTime))
        {
            errors.Add("A Data e Hora de Término são obrigatórias.");
        }

        // Validação de Comparação de Datas
        if (model.DataHoraInicio != default(DateTime) && model.DataHoraFim != default(DateTime) && model.DataHoraFim <= model.DataHoraInicio)
        {
            errors.Add("A data de término deve ser posterior à data de início.");
        }

        // Validação de Tamanho de Descrição
        if (!string.IsNullOrEmpty(model.Descricao) && model.Descricao.Length > 100)
        {
            errors.Add("A Descrição deve ter no máximo 100 caracteres.");
        }

        // Validação de Visibilidade (se você tiver uma regra específica além de obrigatório)
        // Exemplo: se for SomenteConvidados, deve ter pelo menos um convidado
        if (model.Visibilidade == Visibilidade.SomenteConvidados && (model.IdsParticipantesConvidados == null || !model.IdsParticipantesConvidados.Any()))
        {
            errors.Add("Para eventos 'Somente Convidados', pelo menos um participante deve ser selecionado.");
        }

        // Adicione outras validações personalizadas aqui, se necessário.
        // Por exemplo, validação de unicidade do título, se aplicável.

        return errors;
    }

    void OnCancel()
    {
        DialogService.Close(false);
    }
}